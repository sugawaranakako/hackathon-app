import React, { useState, useEffect } from 'react';
import './App.css';
import { recipesData } from './data/recipes';

function App() {
  const [openRecipes, setOpenRecipes] = useState([]);
  const [activeRecipeIndex, setActiveRecipeIndex] = useState(0);
  const [activeTab, setActiveTab] = useState('home');
  const [bookmarks, setBookmarks] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('すべて');
  const [selectedIngredient, setSelectedIngredient] = useState('');
  const [checkedIngredients, setCheckedIngredients] = useState({});
  const [selectedServings, setSelectedServings] = useState({});
  const [timers, setTimers] = useState({});
  const [timerIntervals, setTimerIntervals] = useState({});
  const [showRecipeList, setShowRecipeList] = useState(true);
  const [notification, setNotification] = useState(null);
  const [memos, setMemos] = useState({});
  const [worldRecipes, setWorldRecipes] = useState([]);
  const [isLoadingWorldRecipes, setIsLoadingWorldRecipes] = useState(false);
  const [worldRecipesError, setWorldRecipesError] = useState(null);
  const [hasLoadedInitialRecipes, setHasLoadedInitialRecipes] = useState(false);
  const [displayedWorldRecipesCount, setDisplayedWorldRecipesCount] = useState(8);
  const [cookingMode, setCookingMode] = useState(false);
  const [currentStep, setCurrentStep] = useState(0);

  useEffect(() => {
    const saved = localStorage.getItem('checkedIngredients');
    if (saved) {
      setCheckedIngredients(JSON.parse(saved));
    }
    
    const savedMemos = localStorage.getItem('recipeMemos');
    if (savedMemos) {
      setMemos(JSON.parse(savedMemos));
    }
  }, []);

  useEffect(() => {
    localStorage.setItem('checkedIngredients', JSON.stringify(checkedIngredients));
  }, [checkedIngredients]);

  useEffect(() => {
    localStorage.setItem('recipeMemos', JSON.stringify(memos));
  }, [memos]);
  
  // 初回マウント時に世界のレシピを取得
  useEffect(() => {
    const loadInitialWorldRecipes = async () => {
      if (hasLoadedInitialRecipes) return;
      
      setIsLoadingWorldRecipes(true);
      setWorldRecipesError(null);
      
      try {
        const searchTerms = ['chicken', 'beef', 'pasta', 'fish', 'soup'];
        const randomTerm = searchTerms[Math.floor(Math.random() * searchTerms.length)];
        
        const response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${randomTerm}`);
        if (!response.ok) throw new Error('ネットワークエラー');
        
        const data = await response.json();
        if (data.meals && data.meals.length > 0) {
          const translatedRecipes = data.meals.slice(0, 5).map((meal, index) => {
            const ingredients = [];
            for (let i = 1; i <= 20; i++) {
              const ingredient = meal[`strIngredient${i}`];
              const measure = meal[`strMeasure${i}`];
              if (ingredient && ingredient.trim()) {
                const translatedMeasure = translateMeasure(measure || '');
                ingredients.push(`${translateIngredient(ingredient)} ${translatedMeasure}`.trim());
              }
            }
            
            const instructions = translateInstructions(
              meal.strInstructions
                .split('\n')
                .filter(step => step.trim())
                .map((step, i) => `${i + 1}. ${step.trim()}`)
            );
            
            return {
              id: `world-${meal.idMeal}`,
              name: translateMealName(meal.strMeal),
              description: `${translateArea(meal.strArea)}料理 - ${translateCategory(meal.strCategory)}`,
              image: meal.strMealThumb,
              cookingTime: '30分',
              difficulty: '普通',
              servings: 2,
              ingredients: ingredients,
              instructions: instructions,
              isWorldRecipe: true
            };
          });
          
          setWorldRecipes(translatedRecipes);
        }
        
        setHasLoadedInitialRecipes(true);
      } catch (error) {
        console.log('初回世界レシピ読み込みエラー:', error);
        setHasLoadedInitialRecipes(true);
      } finally {
        setIsLoadingWorldRecipes(false);
      }
    };
    
    loadInitialWorldRecipes();
  }, []);
  
  // インフィニットスクロールの実装
  useEffect(() => {
    const handleScroll = () => {
      if (
        window.innerHeight + document.documentElement.scrollTop >= 
        document.documentElement.offsetHeight - 1000 && // 1000px手前でトリガー
        !isLoadingWorldRecipes &&
        displayedWorldRecipesCount < worldRecipes.length + 50 // 最大限界を設定
      ) {
        loadMoreWorldRecipes();
      }
    };
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [isLoadingWorldRecipes, displayedWorldRecipesCount, worldRecipes.length]);
  
  const loadMoreWorldRecipes = async () => {
    if (isLoadingWorldRecipes) return;
    
    setIsLoadingWorldRecipes(true);
    
    try {
      const searchTerms = ['chicken', 'beef', 'pasta', 'curry', 'salad', 'fish', 'soup', 'rice', 'potato', 'egg'];
      const randomTerm = searchTerms[Math.floor(Math.random() * searchTerms.length)];
      
      const response = await fetch(`https://www.themealdb.com/api/json/v1/1/search.php?s=${randomTerm}`);
      if (!response.ok) throw new Error('ネットワークエラー');
      
      const data = await response.json();
      if (data.meals && data.meals.length > 0) {
        const translatedRecipes = data.meals.slice(0, 6).map((meal) => {
          const ingredients = [];
          for (let i = 1; i <= 20; i++) {
            const ingredient = meal[`strIngredient${i}`];
            const measure = meal[`strMeasure${i}`];
            if (ingredient && ingredient.trim()) {
              const translatedMeasure = translateMeasure(measure || '');
              ingredients.push(`${translateIngredient(ingredient)} ${translatedMeasure}`.trim());
            }
          }
          
          const instructions = translateInstructions(
            meal.strInstructions
              .split('\n')
              .filter(step => step.trim())
              .map((step, i) => `${i + 1}. ${step.trim()}`)
          );
          
          return {
            id: `world-${meal.idMeal}-${Date.now()}-${Math.random()}`, // 重複防止
            name: translateMealName(meal.strMeal),
            description: `${translateArea(meal.strArea)}料理 - ${translateCategory(meal.strCategory)}`,
            image: meal.strMealThumb,
            cookingTime: '30分',
            difficulty: '普通',
            servings: 2,
            ingredients: ingredients,
            instructions: instructions,
            isWorldRecipe: true
          };
        });
        
        setWorldRecipes(prev => [...prev, ...translatedRecipes]);
        setDisplayedWorldRecipesCount(prev => prev + 6);
      }
    } catch (error) {
      console.log('追加世界レシピ読み込みエラー:', error);
    } finally {
      setIsLoadingWorldRecipes(false);
    }
  };

  const allRecipes = [...recipesData, ...worldRecipes];
  
  const categories = ['すべて', '和食', 'パスタ', '中華', 'カレー', '丼もの', '世界の料理'];
  const ingredients = ['鶏肉', '豚肉', '牛肉', '卵', '玉ねぎ', 'きのこ', 'トマト', 'じゃがいも'];
  
  const getRecipeCategory = (recipe) => {
    if (!recipe || !recipe.name) return '和食';
    
    const name = recipe.name.toLowerCase();
    const recipeId = String(recipe.id || ''); // 数値IDも文字列に変換
    
    // 日本のレシピのカテゴリー分け
    if (!recipeId.startsWith('world-')) {
      if (name.includes('パスタ') || name.includes('スパゲティ')) return 'パスタ';
      if (name.includes('カレー')) return 'カレー';
      if (name.includes('丼') || name.includes('ごはん')) return '丼もの';
      if (name.includes('麻婆') || name.includes('中華') || name.includes('チャーハン')) return '中華';
      return '和食';
    }
    
    // 世界のレシピのカテゴリー分け
    if (name.includes('パスタ') || name.includes('スパゲティ') || name.includes('pasta') || name.includes('spaghetti')) return 'パスタ';
    if (name.includes('カレー') || name.includes('curry')) return 'カレー';
    if (name.includes('中華') || name.includes('chinese') || name.includes('チャーハン')) return '中華';
    
    return '世界の料理';
  };
  
  const filteredRecipes = allRecipes.filter(recipe => {
    // テキスト検索
    const matchesSearch = searchQuery === '' || 
      recipe.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      recipe.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
      recipe.ingredients.some(ingredient => ingredient.toLowerCase().includes(searchQuery.toLowerCase()));
    
    // カテゴリーフィルター
    const matchesCategory = selectedCategory === 'すべて' || getRecipeCategory(recipe) === selectedCategory;
    
    // 食材フィルター
    const matchesIngredient = selectedIngredient === '' ||
      recipe.ingredients.some(ingredient => ingredient.includes(selectedIngredient)) ||
      recipe.name.includes(selectedIngredient);
    
    return matchesSearch && matchesCategory && matchesIngredient;
  });
  
  // セクション別にレシピを振り分け
  const getSectionRecipes = () => {
    const summer = allRecipes.filter(recipe => {
      const name = recipe.name.toLowerCase();
      return name.includes('冷やし') || name.includes('サラダ') || name.includes('サラダ') || 
             name.includes('そうめん') || name.includes('冷たい') || 
             name.includes('トマト') || name.includes('さっぱり');
    }).slice(0, 8);
    
    const quick = allRecipes.filter(recipe => {
      const name = recipe.name.toLowerCase();
      const time = recipe.cookingTime;
      return name.includes('簡単') || name.includes('時短') || 
             time.includes('10分') || time.includes('15分') ||
             name.includes('焼き') || name.includes('炒め');
    }).slice(0, 8);
    
    const popular = [...allRecipes].sort(() => 0.5 - Math.random()).slice(0, 6);
    
    const withEgg = allRecipes.filter(recipe => {
      const name = recipe.name.toLowerCase();
      return name.includes('卵') || name.includes('親子') || 
             name.includes('オムレツ') || name.includes('目玉');
    }).slice(0, 8);
    
    const hearty = allRecipes.filter(recipe => {
      const name = recipe.name.toLowerCase();
      return name.includes('カレー') || name.includes('丼') || 
             name.includes('肉') || name.includes('ハンバーグ') ||
             name.includes('ステーキ') || name.includes('照り焼き');
    }).slice(0, 8);
    
    const healthy = allRecipes.filter(recipe => {
      const name = recipe.name.toLowerCase();
      return name.includes('サラダ') || name.includes('野菜') || 
             name.includes('蒸し') || name.includes('ヘルシー') ||
             name.includes('ひじき') || name.includes('さっぱり');
    }).slice(0, 8);
    
    return { summer, quick, popular, withEgg, hearty, healthy };
  };
  
  const sectionRecipes = getSectionRecipes();
  
  // 絞り込みをクリア
  const clearFilters = () => {
    setSearchQuery('');
    setSelectedCategory('すべて');
    setSelectedIngredient('');
  };
  
  const getActiveFilterText = () => {
    const filters = [];
    if (searchQuery) filters.push(`"検索: ${searchQuery}"`);
    if (selectedCategory !== 'すべて') filters.push(`カテゴリ: ${selectedCategory}`);
    if (selectedIngredient) filters.push(`食材: ${selectedIngredient}`);
    return filters.length > 0 ? filters.join(' ・ ') + 'で絞り込み中' : '';
  };

  const toggleIngredient = (recipeId, ingredientIndex) => {
    const key = `${recipeId}-${ingredientIndex}`;
    setCheckedIngredients(prev => ({
      ...prev,
      [key]: !prev[key]
    }));
  };

  const toggleAllIngredients = (recipeId, ingredientsLength, checkAll) => {
    const updates = {};
    for (let i = 0; i < ingredientsLength; i++) {
      const key = `${recipeId}-${i}`;
      updates[key] = checkAll;
    }
    setCheckedIngredients(prev => ({
      ...prev,
      ...updates
    }));
  };

  const getCheckedCount = (recipeId, ingredientsLength) => {
    let count = 0;
    for (let i = 0; i < ingredientsLength; i++) {
      const key = `${recipeId}-${i}`;
      if (checkedIngredients[key]) count++;
    }
    return count;
  };

  const toggleBookmark = (recipeId) => {
    setBookmarks(prev =>
      prev.includes(recipeId)
        ? prev.filter(id => id !== recipeId)
        : [...prev, recipeId]
    );
  };

  const bookmarkedRecipes = allRecipes.filter(recipe =>
    bookmarks.includes(recipe.id)
  );

  // Recipe tab management
  const openRecipe = (recipe) => {
    
    // Check if recipe is already open
    if (openRecipes.find(r => r.id === recipe.id)) {
      // Switch to existing tab
      const index = openRecipes.findIndex(r => r.id === recipe.id);
      setActiveRecipeIndex(index);
      setShowRecipeList(false);
      return;
    }

    // Add new recipe (max 3 tabs)
    if (openRecipes.length >= 3) {
      // Show notification and replace the oldest tab (first one)
      const oldestRecipe = openRecipes[openRecipes.length - 1];
      const message = `最大3つまでしか開けません。「${oldestRecipe.name}」を閉じて「${recipe.name}」を開きます。`;
      setNotification(message);
      setTimeout(() => {
        setNotification(null);
      }, 4000); // Hide after 4 seconds
      setOpenRecipes(prev => [recipe, ...prev.slice(0, 2)]);
      setActiveRecipeIndex(0);
    } else {
      // Add new tab
      setOpenRecipes(prev => [recipe, ...prev]);
      setActiveRecipeIndex(0);
    }
    setShowRecipeList(false);
  };

  const closeRecipe = (index) => {
    setOpenRecipes(prev => {
      const newRecipes = prev.filter((_, i) => i !== index);
      
      // If we're closing the active tab, switch to the previous tab
      if (index === activeRecipeIndex) {
        if (newRecipes.length === 0) {
          setActiveRecipeIndex(0);
          setShowRecipeList(true);
        } else if (index >= newRecipes.length) {
          setActiveRecipeIndex(newRecipes.length - 1);
        }
      } else if (index < activeRecipeIndex) {
        setActiveRecipeIndex(prev => prev - 1);
      }
      
      return newRecipes;
    });
  };

  const switchToRecipe = (index) => {
    setActiveRecipeIndex(index);
    setShowRecipeList(false);
  };

  const getCurrentRecipe = () => {
    return openRecipes[activeRecipeIndex] || null;
  };

  // Memo functions
  const updateMemo = (recipeId, memoText) => {
    setMemos(prev => ({
      ...prev,
      [recipeId]: memoText
    }));
  };

  const clearMemo = (recipeId) => {
    setMemos(prev => {
      const newMemos = { ...prev };
      delete newMemos[recipeId];
      return newMemos;
    });
  };

  // Timer functions
  const extractTimeFromStep = (step) => {
    const timeMatch = step.match(/(\d+)分/);
    if (timeMatch) {
      return parseInt(timeMatch[1]) * 60; // Convert minutes to seconds
    }
    return null;
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const toggleCookingMode = () => {
    setCookingMode(!cookingMode);
  };

  const nextStep = () => {
    const currentRecipe = getCurrentRecipe();
    if (currentRecipe && currentStep < currentRecipe.instructions.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const startTimer = (recipeId, stepIndex, duration) => {
    const timerId = `${recipeId}-${stepIndex}`;
    
    // Clear existing timer if any
    if (timerIntervals[timerId]) {
      clearInterval(timerIntervals[timerId]);
    }

    setTimers(prev => ({
      ...prev,
      [timerId]: { duration, remaining: duration, isRunning: true, isPaused: false }
    }));

    const interval = setInterval(() => {
      setTimers(prev => {
        const timer = prev[timerId];
        if (!timer || !timer.isRunning || timer.isPaused) return prev;

        const newRemaining = timer.remaining - 1;
        
        if (newRemaining <= 0) {
          // Timer completed
          clearInterval(timerIntervals[timerId]);
          
          // Play alert sound
          try {
            // Use Web Audio API to generate beep sound
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.value = 800; // 800Hz tone
            gainNode.gain.value = 0.3;
            
            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.2); // 200ms beep
          } catch (e) {
            console.error('Failed to play sound:', e);
          }
          
          // Try vibration if available
          if ('vibrate' in navigator) {
            navigator.vibrate([200, 100, 200]);
          }
          
          return {
            ...prev,
            [timerId]: { ...timer, remaining: 0, isRunning: false, isCompleted: true }
          };
        }
        
        // Warning at 30s and 10s
        if (newRemaining === 30 || newRemaining === 10) {
          try {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = audioContext.createOscillator();
            const gainNode = audioContext.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(audioContext.destination);
            
            oscillator.frequency.value = 600; // 600Hz warning tone
            gainNode.gain.value = 0.2;
            
            oscillator.start();
            oscillator.stop(audioContext.currentTime + 0.1); // 100ms beep
          } catch (e) {
            console.error('Failed to play warning sound:', e);
          }
        }
        
        return {
          ...prev,
          [timerId]: { ...timer, remaining: newRemaining }
        };
      });
    }, 1000);

    setTimerIntervals(prev => ({
      ...prev,
      [timerId]: interval
    }));
  };

  const pauseTimer = (recipeId, stepIndex) => {
    const timerId = `${recipeId}-${stepIndex}`;
    
    setTimers(prev => ({
      ...prev,
      [timerId]: { ...prev[timerId], isPaused: true }
    }));
  };

  const resumeTimer = (recipeId, stepIndex) => {
    const timerId = `${recipeId}-${stepIndex}`;
    
    setTimers(prev => ({
      ...prev,
      [timerId]: { ...prev[timerId], isPaused: false }
    }));
  };

  const stopTimer = (recipeId, stepIndex) => {
    const timerId = `${recipeId}-${stepIndex}`;
    
    if (timerIntervals[timerId]) {
      clearInterval(timerIntervals[timerId]);
      setTimerIntervals(prev => {
        const newIntervals = { ...prev };
        delete newIntervals[timerId];
        return newIntervals;
      });
    }
    
    setTimers(prev => {
      const newTimers = { ...prev };
      delete newTimers[timerId];
      return newTimers;
    });
  };

  
  const translateMeasure = (measure) => {
    if (!measure) return '';
    
    const measurements = {
      // 体積
      'cup': 'カップ',
      'cups': 'カップ',
      'tablespoon': '大さじ',
      'tablespoons': '大さじ',
      'tbsp': '大さじ',
      'teaspoon': '小さじ',
      'teaspoons': '小さじ',
      'tsp': '小さじ',
      'ml': 'ml',
      'milliliter': 'ml',
      'milliliters': 'ml',
      'l': 'L',
      'liter': 'リットル',
      'liters': 'リットル',
      'litre': 'リットル',
      'litres': 'リットル',
      'fl oz': 'fl oz',
      'fluid ounce': 'fl oz',
      'fluid ounces': 'fl oz',
      'pint': 'パイント',
      'pints': 'パイント',
      'quart': 'クォート',
      'quarts': 'クォート',
      'gallon': 'ガロン',
      'gallons': 'ガロン',
      // 重量
      'g': 'g',
      'gram': 'g',
      'grams': 'g',
      'kg': 'kg',
      'kilogram': 'kg',
      'kilograms': 'kg',
      'mg': 'mg',
      'milligram': 'mg',
      'milligrams': 'mg',
      'oz': 'オンス',
      'ounce': 'オンス',
      'ounces': 'オンス',
      'lb': 'ポンド',
      'lbs': 'ポンド', 
      'pound': 'ポンド',
      'pounds': 'ポンド',
      '1lbs': '1ポンド',
      '2lbs': '2ポンド',
      '3lbs': '3ポンド',
      // 個数・数量
      'piece': '個',
      'pieces': '個',
      'slice': '枚',
      'slices': '枚',
      'clove': '片',
      'cloves': '片',
      'bunch': '束',
      'bunches': '束',
      'sprig': '枝',
      'sprigs': '枝',
      'stalk': '本',
      'stalks': '本',
      'leaf': '枚',
      'leaves': '枚',
      'head': '個',
      'heads': '個',
      'ball': '個',
      'balls': '個',
      'handful': 'ひとつかみ',
      'handfuls': 'ひとつかみ',
      'pinch': 'ひとつまみ',
      'pinches': 'ひとつまみ',
      'dash': '少々',
      'dashes': '少々',
      'drop': '滴',
      'drops': '滴',
      'to taste': '適量',
      'as needed': '適量',
      'serving': '人分',
      'servings': '人分',
      // サイズ
      'small': '小さめ',
      'medium': '中くらい',
      'large': '大きめ',
      'extra large': '特大',
      'xl': '特大',
      'jumbo': 'ジャンボ',
      'baby': 'ミニ',
      'mini': 'ミニ',
      // 分量
      'dozen': 'ダース',
      'half': '半分',
      'halves': '半分',
      'quarter': '1/4',
      'quarters': '1/4',
      'third': '1/3',
      'thirds': '1/3',
      'whole': '丸ごと1個',
      // 容器・パッケージ
      'can': '缶',
      'cans': '缶',
      'jar': '瓶',
      'jars': '瓶',
      'package': 'パック',
      'packages': 'パック',
      'packet': '袋',
      'packets': '袋',
      'bag': '袋',
      'bags': '袋',
      'bottle': '本',
      'bottles': '本',
      'box': '箱',
      'boxes': '箱',
      'carton': 'パック',
      'cartons': 'パック',
      'container': '容器',
      'containers': '容器',
      'tin': '缶',
      'tins': '缶',
      'tube': 'チューブ',
      'tubes': 'チューブ',
      'bar': '本',
      'bars': '本',
      'stick': '本',
      'sticks': '本',
      // 調理状態
      'fresh': '新鮮な',
      'dried': '乾燥',
      'dry': '乾燥',
      'frozen': '冷凍',
      'thawed': '解凍した',
      'canned': '缶詰の',
      'cooked': '調理済み',
      'uncooked': '生の',
      'raw': '生の',
      'ripe': '熟した',
      'room temperature': '常温の',
      // カット方法
      'chopped': 'みじん切り',
      'finely chopped': '細かくみじん切り',
      'roughly chopped': '粗みじん切り',
      'diced': 'さいの目切り',
      'finely diced': '細かくさいの目切り',
      'sliced': 'スライス',
      'thinly sliced': '薄切り',
      'thickly sliced': '厚切り',
      'julienned': '千切り',
      'shredded': '細切り',
      'minced': 'みじん切り',
      'crushed': 'つぶした',
      'mashed': 'マッシュした',
      'grated': 'すりおろし',
      'finely grated': '細かくすりおろし',
      'ground': '挽いた',
      'powdered': '粉末',
      'cubed': '角切り',
      'halved': '半分に切った',
      'quartered': '4等分した',
      'whole': 'そのまま',
      'torn': 'ちぎった',
      'crumbled': '崩した',
      // その他
      'optional': 'お好みで',
      'or': 'または',
      'about': '約',
      'approximately': '約',
      'roughly': '約',
      'heaping': '山盛り',
      'level': 'すりきり',
      'rounded': '丸く盛った',
      'scant': '少なめ',
      'generous': 'たっぷり',
      'packed': 'しっかり詰めた',
      'lightly packed': '軽く詰めた',
      'firmly packed': 'しっかり詰めた',
      'loosely packed': 'ふんわり詰めた'
    };
    
    // 数字と単位の処理を改善
    let translated = measure.toLowerCase();
    
    // 分数の処理
    translated = translated.replace(/\b1\/2\b/g, '1/2');
    translated = translated.replace(/\b1\/3\b/g, '1/3');
    translated = translated.replace(/\b1\/4\b/g, '1/4');
    translated = translated.replace(/\b2\/3\b/g, '2/3');
    translated = translated.replace(/\b3\/4\b/g, '3/4');
    
    // 長い語句から変換
    const sortedMeasurements = Object.entries(measurements)
      .sort(([a], [b]) => b.length - a.length);
    
    sortedMeasurements.forEach(([en, jp]) => {
      const regex = new RegExp(`\\b${en}\\b`, 'gi');
      translated = translated.replace(regex, jp);
    });
    
    // 数字と単位の間のスペースを削除（日本語の慣習）
    translated = translated.replace(/(\d+)\s+(g|kg|ml|L|個|枚|片|束|本|缶|瓶|パック|袋|箱)/g, '$1$2');
    
    return translated;
  };
  
  // 強力な翻訳システム
  const createTranslationSystem = () => {
    const DEBUG_MODE = true; // デバッグモードのオン/オフ
    
    // 包括的な翻訳辞書
    const comprehensiveDict = {
      // 野菜・青果類（完全版）
      'green olives': 'グリーンオリーブ',
      'black olives': 'ブラックオリーブ',
      'olives': 'オリーブ',
      'olive': 'オリーブ',
      'green olive': 'グリーンオリーブ',
      'black olive': 'ブラックオリーブ',
      'kalamata olives': 'カラマタオリーブ',
      'stuffed olives': '詰め物入りオリーブ',
      
      // オイル・調味料類（完全版）
      'extra virgin olive oil': 'エクストラバージンオリーブオイル',
      'extra-virgin olive oil': 'エクストラバージンオリーブオイル',
      'olive oil': 'オリーブオイル',
      'vegetable oil': 'サラダ油',
      'canola oil': 'キャノーラ油',
      'sesame oil': 'ごま油',
      'coconut oil': 'ココナッツオイル',
      'sunflower oil': 'ひまわり油',
      'peanut oil': 'ピーナッツオイル',
      
      // 肉類（完全版）
      'chicken breast': '鶏むね肉',
      'chicken thigh': '鶏もも肉',
      'chicken wing': '手羽先',
      'chicken drumstick': '手羽元',
      'ground chicken': '鶏ひき肉',
      'whole chicken': '丸鶏',
      'chicken': '鶏肉',
      'beef steak': '牛ステーキ',
      'ground beef': '牛ひき肉',
      'beef chuck': '牛肩肉',
      'beef sirloin': '牛サーロイン',
      'beef tenderloin': '牛ヒレ肉',
      'beef': '牛肉',
      'pork shoulder': '豚肩肉',
      'pork chop': '豚ロース',
      'ground pork': '豚ひき肉',
      'pork belly': '豚バラ肉',
      'pork': '豚肉',
      'lamb': 'ラム肉',
      'veal': '仔牛肉',
      'duck': '鴨肉',
      'turkey': '七面鳥',
      'ham': 'ハム',
      'bacon': 'ベーコン',
      'sausage': 'ソーセージ',
      'prosciutto': 'プロシュート',
      
      // 魚介類（完全版）
      'salmon fillet': 'サーモンフィレ',
      'salmon': 'サーモン',
      'tuna': 'ツナ',
      'cod': 'タラ',
      'halibut': 'ヒラメ',
      'sea bass': 'スズキ',
      'mackerel': 'サバ',
      'sardine': 'イワシ',
      'shrimp': 'エビ',
      'prawns': 'エビ',
      'lobster': 'ロブスター',
      'crab': 'カニ',
      'scallop': 'ホタテ',
      'oyster': 'カキ',
      'clam': 'アサリ',
      'mussel': 'ムール貝',
      'squid': 'イカ',
      'octopus': 'タコ',
      'fish': '魚',
      
      // 野菜類（超完全版）
      'red onion': '赤玉ねぎ',
      'white onion': '白玉ねぎ',
      'yellow onion': '黄玉ねぎ',
      'sweet onion': '甘玉ねぎ',
      'green onion': '青ネギ',
      'spring onion': '青ネギ',
      'scallion': '青ネギ',
      'shallot': 'エシャロット',
      'leek': '長ネギ',
      'onion': '玉ねぎ',
      'onions': '玉ねぎ',
      
      'roma tomato': 'ロマトマト',
      'cherry tomato': 'ミニトマト',
      'grape tomato': 'グレープトマト',
      'beefsteak tomato': 'ビーフステーキトマト',
      'heirloom tomato': 'エアルームトマト',
      'sun-dried tomato': 'ドライトマト',
      'tomato paste': 'トマトペースト',
      'tomato sauce': 'トマトソース',
      'crushed tomato': 'クラッシュトマト',
      'diced tomato': 'ダイストマト',
      'whole tomato': 'ホールトマト',
      'tomato': 'トマト',
      'tomatoes': 'トマト',
      
      'russet potato': 'ラセット芋',
      'red potato': '赤じゃがいも',
      'fingerling potato': 'フィンガーリング芋',
      'baby potato': '小芋',
      'sweet potato': 'さつまいも',
      'potato': 'じゃがいも',
      'potatoes': 'じゃがいも',
      
      'baby carrot': 'ベビーキャロット',
      'carrot': '人参',
      'carrots': '人参',
      
      'garlic clove': 'にんにく片',
      'garlic bulb': 'にんにく玉',
      'minced garlic': 'にんにくみじん切り',
      'garlic powder': 'にんにくパウダー',
      'garlic': 'にんにく',
      
      'fresh ginger': '生姜',
      'ground ginger': '生姜パウダー',
      'ginger root': '生姜',
      'ginger': '生姜',
      
      // ハーブ・スパイス（完全版）
      'fresh basil': 'フレッシュバジル',
      'dried basil': 'ドライバジル',
      'basil leaves': 'バジルの葉',
      'thai basil': 'タイバジル',
      'basil': 'バジル',
      
      'fresh parsley': 'フレッシュパセリ',
      'dried parsley': 'ドライパセリ',
      'flat-leaf parsley': 'イタリアンパセリ',
      'curly parsley': 'カーリーパセリ',
      'parsley': 'パセリ',
      
      'fresh cilantro': 'フレッシュパクチー',
      'cilantro leaves': 'パクチーの葉',
      'cilantro': 'パクチー',
      'coriander leaves': 'パクチー',
      'fresh coriander': 'フレッシュパクチー',
      
      'fresh mint': 'フレッシュミント',
      'dried mint': 'ドライミント',
      'mint leaves': 'ミントの葉',
      'mint': 'ミント',
      
      'fresh thyme': 'フレッシュタイム',
      'dried thyme': 'ドライタイム',
      'thyme leaves': 'タイムの葉',
      'thyme': 'タイム',
      
      'fresh oregano': 'フレッシュオレガノ',
      'dried oregano': 'ドライオレガノ',
      'oregano': 'オレガノ',
      
      'fresh rosemary': 'フレッシュローズマリー',
      'dried rosemary': 'ドライローズマリー',
      'rosemary sprigs': 'ローズマリーの枝',
      'rosemary': 'ローズマリー',
      
      'bay leaf': 'ローリエ',
      'bay leaves': 'ローリエ',
      'fresh bay leaves': 'フレッシュローリエ',
      
      'black pepper': '黒こしょう',
      'white pepper': '白こしょう',
      'ground black pepper': '黒こしょうパウダー',
      'peppercorns': 'こしょうの実',
      'pepper': 'こしょう',
      
      'sea salt': '海塩',
      'kosher salt': 'コーシャーソルト',
      'table salt': '食塩',
      'coarse salt': '粗塩',
      'fine salt': '細塩',
      'salt': '塩',
      
      'paprika': 'パプリカパウダー',
      'smoked paprika': 'スモークパプリカ',
      'hot paprika': 'ホットパプリカ',
      'sweet paprika': 'スウィートパプリカ',
      
      'cumin': 'クミン',
      'ground cumin': 'クミンパウダー',
      'cumin seeds': 'クミンシード',
      
      'coriander': 'コリアンダー',
      'ground coriander': 'コリアンダーパウダー',
      'coriander seeds': 'コリアンダーシード',
      
      'turmeric': 'ターメリック',
      'ground turmeric': 'ターメリックパウダー',
      
      'curry powder': 'カレー粉',
      'garam masala': 'ガラムマサラ',
      'chili powder': 'チリパウダー',
      'cayenne pepper': 'カイエンペッパー',
      'red pepper flakes': '唐辛子フレーク',
      'crushed red pepper': '砕いた唐辛子',
      
      'cinnamon': 'シナモン',
      'ground cinnamon': 'シナモンパウダー',
      'cinnamon stick': 'シナモンスティック',
      
      'nutmeg': 'ナツメグ',
      'ground nutmeg': 'ナツメグパウダー',
      'whole nutmeg': 'ナツメグホール',
      
      'clove': 'クローブ',
      'cloves': 'クローブ',
      'ground cloves': 'クローブパウダー',
      'whole cloves': 'クローブホール',
      
      'cardamom': 'カルダモン',
      'ground cardamom': 'カルダモンパウダー',
      'cardamom pods': 'カルダモンポッド',
      
      'star anise': '八角',
      'fennel seeds': 'フェンネルシード',
      'mustard seeds': 'マスタードシード',
      'sesame seeds': 'ごま',
      'poppy seeds': 'ポピーシード',
      'saffron': 'サフラン',
      'vanilla': 'バニラ',
      'vanilla extract': 'バニラエッセンス',
      'vanilla bean': 'バニラビーンズ',
      
      // 乳製品（完全版）
      'whole milk': '全脂肪牛乳',
      'skim milk': '無脂肪牛乳',
      'low-fat milk': '低脂肪牛乳',
      '2% milk': '2%牛乳',
      'buttermilk': 'バターミルク',
      'evaporated milk': 'エバミルク',
      'condensed milk': 'コンデンスミルク',
      'milk': '牛乳',
      
      'heavy cream': '生クリーム',
      'whipping cream': 'ホイップクリーム',
      'half and half': 'ハーフアンドハーフ',
      'sour cream': 'サワークリーム',
      'cream': 'クリーム',
      
      'plain yogurt': 'プレーンヨーグルト',
      'greek yogurt': 'ギリシャヨーグルト',
      'vanilla yogurt': 'バニラヨーグルト',
      'yogurt': 'ヨーグルト',
      
      'unsalted butter': '無塩バター',
      'salted butter': '有塩バター',
      'clarified butter': '澄ましバター',
      'butter': 'バター',
      
      'cream cheese': 'クリームチーズ',
      'cottage cheese': 'カッテージチーズ',
      'ricotta cheese': 'リコッタチーズ',
      'mascarpone': 'マスカルポーネ',
      'mozzarella cheese': 'モッツァレラチーズ',
      'fresh mozzarella': 'フレッシュモッツァレラ',
      'parmesan cheese': 'パルメザンチーズ',
      'grated parmesan': 'パルメザンチーズすりおろし',
      'romano cheese': 'ロマーノチーズ',
      'cheddar cheese': 'チェダーチーズ',
      'swiss cheese': 'スイスチーズ',
      'gouda cheese': 'ゴーダチーズ',
      'brie cheese': 'ブリーチーズ',
      'camembert': 'カマンベール',
      'blue cheese': 'ブルーチーズ',
      'feta cheese': 'フェタチーズ',
      'goat cheese': 'ゴートチーズ',
      'cheese': 'チーズ',
      
      // 穀物・パン・パスタ（完全版）
      'white rice': '白米',
      'brown rice': '玄米',
      'basmati rice': 'バスマティライス',
      'jasmine rice': 'ジャスミンライス',
      'wild rice': 'ワイルドライス',
      'arborio rice': 'アルボリオ米',
      'sushi rice': 'すし米',
      'long-grain rice': '長粒米',
      'short-grain rice': '短粒米',
      'rice': '米',
      
      'all-purpose flour': '中力粉',
      'bread flour': '強力粉',
      'cake flour': '薄力粉',
      'whole wheat flour': '全粒粉',
      'self-rising flour': 'セルフレイジングフラワー',
      'pastry flour': 'ペストリーフラワー',
      'flour': '小麦粉',
      
      'white bread': '食パン',
      'whole wheat bread': '全粒粉パン',
      'sourdough bread': 'サワードウパン',
      'rye bread': 'ライ麦パン',
      'pumpernickel': 'プンパーニッケル',
      'baguette': 'バゲット',
      'ciabatta': 'チャバタ',
      'focaccia': 'フォカッチャ',
      'pita bread': 'ピタパン',
      'naan': 'ナン',
      'tortilla': 'トルティーヤ',
      'bread': 'パン',
      
      'spaghetti': 'スパゲッティ',
      'linguine': 'リングイネ',
      'fettuccine': 'フェットチーネ',
      'angel hair': 'エンジェルヘア',
      'penne': 'ペンネ',
      'rigatoni': 'リガトーニ',
      'fusilli': 'フジッリ',
      'rotini': 'ロティーニ',
      'farfalle': 'ファルファッレ',
      'bow tie pasta': '蝶々パスタ',
      'shells': 'シェルパスタ',
      'macaroni': 'マカロニ',
      'elbow macaroni': 'エルボマカロニ',
      'lasagna noodles': 'ラザニアシート',
      'ravioli': 'ラビオリ',
      'tortellini': 'トルテリーニ',
      'gnocchi': 'ニョッキ',
      'pasta': 'パスタ',
      
      // 豆類・ナッツ（完全版）
      'black beans': '黒豆',
      'kidney beans': 'キドニービーンズ',
      'pinto beans': 'ピント豆',
      'navy beans': 'ネイビービーンズ',
      'cannellini beans': 'カネリーニ豆',
      'lima beans': 'ライマ豆',
      'chickpeas': 'ひよこ豆',
      'garbanzo beans': 'ひよこ豆',
      'lentils': 'レンズ豆',
      'red lentils': '赤レンズ豆',
      'green lentils': '緑レンズ豆',
      'split peas': 'スプリットピー',
      'black-eyed peas': 'ブラックアイビーンズ',
      'edamame': '枝豆',
      'soybeans': '大豆',
      'beans': '豆',
      
      'almonds': 'アーモンド',
      'walnuts': 'くるみ',
      'pecans': 'ピーカン',
      'cashews': 'カシューナッツ',
      'pistachios': 'ピスタチオ',
      'hazelnuts': 'ヘーゼルナッツ',
      'brazil nuts': 'ブラジルナッツ',
      'macadamia nuts': 'マカダミアナッツ',
      'pine nuts': '松の実',
      'peanuts': 'ピーナッツ',
      'sunflower seeds': 'ひまわりの種',
      'pumpkin seeds': 'かぼちゃの種',
      'chia seeds': 'チアシード',
      'flax seeds': '亜麻仁',
      'sesame seeds': 'ごま',
      
      // 調味料・ソース（超完全版）
      'soy sauce': '醤油',
      'light soy sauce': '薄口醤油',
      'dark soy sauce': '濃口醤油',
      'tamari': 'たまり醤油',
      'low sodium soy sauce': '減塩醤油',
      
      'miso paste': '味噌',
      'white miso': '白味噌',
      'red miso': '赤味噌',
      'miso': '味噌',
      
      'rice vinegar': '米酢',
      'white vinegar': '白酢',
      'apple cider vinegar': 'りんご酢',
      'balsamic vinegar': 'バルサミコ酢',
      'red wine vinegar': '赤ワインビネガー',
      'white wine vinegar': '白ワインビネガー',
      'sherry vinegar': 'シェリービネガー',
      'vinegar': '酢',
      
      'cooking wine': '料理酒',
      'dry white wine': '辛口白ワイン',
      'dry red wine': '辛口赤ワイン',
      'white wine': '白ワイン',
      'red wine': '赤ワイン',
      'wine': 'ワイン',
      
      'sake': '日本酒',
      'mirin': 'みりん',
      'cooking sake': '料理酒',
      
      'honey': 'はちみつ',
      'maple syrup': 'メープルシロップ',
      'agave nectar': 'アガベシロップ',
      'corn syrup': 'コーンシロップ',
      'molasses': 'モラセス',
      
      'dijon mustard': 'ディジョンマスタード',
      'whole grain mustard': '粒マスタード',
      'yellow mustard': 'イエローマスタード',
      'dry mustard': 'マスタードパウダー',
      'mustard': 'マスタード',
      
      'ketchup': 'ケチャップ',
      'tomato ketchup': 'トマトケチャップ',
      'mayonnaise': 'マヨネーズ',
      'miracle whip': 'ミラクルホイップ',
      
      'worcestershire sauce': 'ウスターソース',
      'hot sauce': 'ホットソース',
      'tabasco': 'タバスコ',
      'sriracha': 'シラチャーソース',
      'fish sauce': '魚醤',
      'oyster sauce': 'オイスターソース',
      'hoisin sauce': '海鮮醤',
      'teriyaki sauce': '照り焼きソース',
      'bbq sauce': 'バーベキューソース',
      'steak sauce': 'ステーキソース',
      
      'pesto': 'ペスト',
      'basil pesto': 'バジルペスト',
      'sun-dried tomato pesto': 'ドライトマトペスト',
      
      'tahini': 'タヒニ',
      'sesame paste': 'ごまペースト',
      'peanut butter': 'ピーナッツバター',
      'almond butter': 'アーモンドバター',
      'cashew butter': 'カシューバター',
      
      // 単位・計量（完全版）
      'teaspoon': '小さじ',
      'teaspoons': '小さじ',
      'tsp': '小さじ',
      'tablespoon': '大さじ',
      'tablespoons': '大さじ',
      'tbsp': '大さじ',
      'cup': 'カップ',
      'cups': 'カップ',
      'pint': 'パイント',
      'pints': 'パイント',
      'quart': 'クォート',
      'quarts': 'クォート',
      'gallon': 'ガロン',
      'gallons': 'ガロン',
      'fluid ounce': 'fl oz',
      'fluid ounces': 'fl oz',
      'fl oz': 'fl oz',
      'ounce': 'オンス',
      'ounces': 'オンス',
      'oz': 'オンス',
      'pound': 'ポンド',
      'pounds': 'ポンド',
      'lb': 'ポンド',
      'lbs': 'ポンド',
      'gram': 'g',
      'grams': 'g',
      'g': 'g',
      'kilogram': 'kg',
      'kilograms': 'kg',
      'kg': 'kg',
      'liter': 'リットル',
      'liters': 'リットル',
      'l': 'L',
      'milliliter': 'ml',
      'milliliters': 'ml',
      'ml': 'ml',
      
      // 個数・数量
      'piece': '個',
      'pieces': '個',
      'slice': '枚',
      'slices': '枚',
      'clove': '片',
      'cloves': '片',
      'bunch': '束',
      'bunches': '束',
      'head': '個',
      'heads': '個',
      'bulb': '玉',
      'bulbs': '玉',
      'stalk': '本',
      'stalks': '本',
      'sprig': '枝',
      'sprigs': '枝',
      'leaf': '枚',
      'leaves': '枚',
      'can': '缶',
      'cans': '缶',
      'jar': '瓶',
      'jars': '瓶',
      'bottle': '本',
      'bottles': '本',
      'package': 'パック',
      'packages': 'パック',
      'bag': '袋',
      'bags': '袋',
      'box': '箱',
      'boxes': '箱',
      'container': '容器',
      'containers': '容器',
      
      // 調理用語（完全版）
      'bring to a boil': '沸騰させる',
      'bring to boil': '沸騰させる',
      'bring to the boil': '沸騰させる',
      'bring': '沸騰させる',
      'wash': '洗う',
      'wash the': '〜を洗う',
      'cut into': '〜に切る',
      'cut': '切る',
      'chop': '刻む',
      'dice': 'さいの目切りにする',
      'slice': 'スライスする',
      'mince': 'みじん切りにする',
      'grate': 'すりおろす',
      'peel': '皮をむく',
      'trim': '取り除く',
      'core': '芯を取る',
      'meanwhile': 'その間に',
      'sprinkle': '振りかける',
      'sprinkle with': '〜を振りかける',
      'toss': '和える',
      'toss with': '〜で和える',
      'drain': '水を切る',
      'strain': 'こす',
      'allow the flavours to mingle': '味をなじませる',
      'allow flavours to mingle': '味をなじませる',
      'let flavours mingle': '味をなじませる',
      'season': '味付けする',
      'season with': '〜で味付けする',
      'taste and adjust': '味見して調整する',
      'mix': '混ぜる',
      'stir': 'かき混ぜる',
      'whisk': '泡立てる',
      'beat': '混ぜる',
      'fold': 'さっくり混ぜる',
      'combine': '合わせる',
      'add': '加える',
      'pour': '注ぐ',
      'heat': '加熱する',
      'warm': '温める',
      'cool': '冷ます',
      'chill': '冷やす',
      'freeze': '冷凍する',
      'thaw': '解凍する',
      'melt': '溶かす',
      'boil': '茹でる',
      'simmer': '弱火で煮る',
      'steam': '蒸す',
      'fry': '揚げる',
      'sauté': 'ソテーする',
      'bake': 'オーブンで焼く',
      'roast': 'ローストする',
      'grill': 'グリルする',
      'broil': '直火で焼く',
      'toast': 'トーストする',
      'brown': 'こんがり焼く',
      'sear': '表面を焼く',
      'caramelize': 'カラメル化する',
      'reduce': '煮詰める',
      'thicken': 'とろみをつける',
      'marinate': 'マリネする',
      'serve': '盛り付ける',
      'garnish': '飾る',
      'remove': '取り除く',
      'discard': '捨てる',
      'reserve': '取っておく',
      'set aside': '取り置く',
      'transfer': '移す',
      'arrange': '並べる',
      'cover': '蓋をする',
      'uncover': '蓋を取る',
      'wrap': '包む',
      'unwrap': '包みを取る',
      'store': '保存する',
      'refrigerate': '冷蔵する',
      'rest': '休ませる',
      'stand': '置いておく',
      'let stand': 'そのまま置く',
      'cool completely': '完全に冷ます',
      'at room temperature': '室温で',
      'until tender': '柔らかくなるまで',
      'until golden': 'きつね色になるまで',
      'until done': '火が通るまで',
      'until fragrant': '香りが立つまで',
      'until smooth': 'なめらかになるまで',
      'until combined': '混ざるまで',
      'until thick': 'とろみがつくまで',
      'for': '〜間',
      'about': '約',
      'approximately': '約',
      'or until': '〜するまで',
      'minutes': '分',
      'minute': '分',
      'hours': '時間',
      'hour': '時間',
      'seconds': '秒',
      'second': '秒'
    };
    
    // カタカナ変換用の簡易辞書
    const katakanaFallback = {
      'a': 'ア', 'i': 'イ', 'u': 'ウ', 'e': 'エ', 'o': 'オ',
      'ka': 'カ', 'ki': 'キ', 'ku': 'ク', 'ke': 'ケ', 'ko': 'コ',
      'sa': 'サ', 'si': 'シ', 'su': 'ス', 'se': 'セ', 'so': 'ソ',
      'ta': 'タ', 'ti': 'チ', 'tu': 'ツ', 'te': 'テ', 'to': 'ト',
      'na': 'ナ', 'ni': 'ニ', 'nu': 'ヌ', 'ne': 'ネ', 'no': 'ノ',
      'ha': 'ハ', 'hi': 'ヒ', 'hu': 'フ', 'he': 'ヘ', 'ho': 'ホ',
      'ma': 'マ', 'mi': 'ミ', 'mu': 'ム', 'me': 'メ', 'mo': 'モ',
      'ya': 'ヤ', 'yu': 'ユ', 'yo': 'ヨ',
      'ra': 'ラ', 'ri': 'リ', 'ru': 'ル', 're': 'レ', 'ro': 'ロ',
      'wa': 'ワ', 'wo': 'ヲ', 'n': 'ン',
      'ga': 'ガ', 'gi': 'ギ', 'gu': 'グ', 'ge': 'ゲ', 'go': 'ゴ',
      'za': 'ザ', 'zi': 'ジ', 'zu': 'ズ', 'ze': 'ゼ', 'zo': 'ゾ',
      'da': 'ダ', 'di': 'ディ', 'du': 'ヅ', 'de': 'デ', 'do': 'ド',
      'ba': 'バ', 'bi': 'ビ', 'bu': 'ブ', 'be': 'ベ', 'bo': 'ボ',
      'pa': 'パ', 'pi': 'ピ', 'pu': 'プ', 'pe': 'ペ', 'po': 'ポ'
    };
    
    // 単語のカタカナ変換（フォールバック）
    const toKatakana = (word) => {
      // 基本的な英単語→カタカナ変換
      const basicConversions = {
        'pasta': 'パスタ',
        'pizza': 'ピザ',
        'sauce': 'ソース',
        'cream': 'クリーム',
        'butter': 'バター',
        'sugar': 'シュガー',
        'oil': 'オイル',
        'wine': 'ワイン',
        'beer': 'ビール',
        'coffee': 'コーヒー',
        'tea': 'ティー',
        'cake': 'ケーキ',
        'bread': 'ブレッド',
        'rice': 'ライス',
        'soup': 'スープ',
        'salad': 'サラダ',
        'meat': 'ミート',
        'fish': 'フィッシュ',
        'chicken': 'チキン',
        'beef': 'ビーフ',
        'pork': 'ポーク',
        'cheese': 'チーズ',
        'milk': 'ミルク',
        'egg': 'エッグ',
        'apple': 'アップル',
        'orange': 'オレンジ',
        'lemon': 'レモン',
        'lime': 'ライム',
        'banana': 'バナナ',
        'grape': 'グレープ',
        'tomato': 'トマト',
        'potato': 'ポテト',
        'onion': 'オニオン',
        'garlic': 'ガーリック',
        'pepper': 'ペッパー',
        'salt': 'ソルト',
        'water': 'ウォーター',
        'ice': 'アイス',
        'hot': 'ホット',
        'cold': 'コールド',
        'fresh': 'フレッシュ',
        'dry': 'ドライ',
        'wet': 'ウェット',
        'sweet': 'スウィート',
        'sour': 'サワー',
        'spicy': 'スパイシー',
        'mild': 'マイルド',
        'strong': 'ストロング',
        'light': 'ライト',
        'heavy': 'ヘビー',
        'thick': 'シック',
        'thin': 'シン',
        'large': 'ラージ',
        'small': 'スモール',
        'medium': 'ミディアム',
        'extra': 'エクストラ',
        'super': 'スーパー',
        'special': 'スペシャル',
        'premium': 'プレミアム',
        'classic': 'クラシック',
        'traditional': 'トラディショナル',
        'modern': 'モダン',
        'style': 'スタイル',
        'type': 'タイプ',
        'kind': 'カインド',
        'mix': 'ミックス',
        'blend': 'ブレンド',
        'pure': 'ピュア',
        'natural': 'ナチュラル',
        'organic': 'オーガニック'
      };
      
      const lowerWord = word.toLowerCase();
      if (basicConversions[lowerWord]) {
        return basicConversions[lowerWord];
      }
      
      // 簡易的な音韻変換（完璧ではないが、フォールバック用）
      let katakana = '';
      for (let i = 0; i < word.length; i++) {
        const char = word[i].toLowerCase();
        if (katakanaFallback[char]) {
          katakana += katakanaFallback[char];
        } else if (char === 'l') {
          katakana += 'ル';
        } else if (char === 'r') {
          katakana += 'ル';
        } else if (char === 'v') {
          katakana += 'ブ';
        } else if (char === 'f') {
          katakana += 'フ';
        } else if (char === 'th') {
          katakana += 'ス';
        } else {
          katakana += char.toUpperCase();
        }
      }
      return katakana;
    };
    
    // 翻訳漏れチェック関数
    const checkUntranslated = (text) => {
      if (!DEBUG_MODE) return [];
      
      const words = text.split(/\s+/);
      const untranslated = [];
      
      words.forEach(word => {
        const cleanWord = word.replace(/[^\w\s]/g, '').toLowerCase();
        if (cleanWord && /^[a-zA-Z]+$/.test(cleanWord) && cleanWord.length > 2) {
          if (!comprehensiveDict[cleanWord] && !comprehensiveDict[cleanWord + 's'] && !comprehensiveDict[cleanWord.slice(0, -1)]) {
            untranslated.push(cleanWord);
          }
        }
      });
      
      return [...new Set(untranslated)]; // 重複除去
    };
    
    // メイン翻訳関数
    const translate = (text, type = 'general') => {
      if (!text || typeof text !== 'string') return text;
      
      if (DEBUG_MODE) {
        console.log(`🔍 [翻訳前 ${type}]:`, text);
      }
      
      let translated = text;
      
      // 1. 長いフレーズから順に翻訳（重要：順序が大事）
      const sortedEntries = Object.entries(comprehensiveDict)
        .sort(([a], [b]) => b.length - a.length);
      
      sortedEntries.forEach(([english, japanese]) => {
        const regex = new RegExp(`\\b${english.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi');
        if (regex.test(translated)) {
          translated = translated.replace(regex, japanese);
        }
      });
      
      // 2. 数字と単位のスペース統一
      translated = translated.replace(/(\\d+)\\s+(g|kg|ml|L|個|枚|片|束|本|缶|瓶|パック|袋|箱|カップ|大さじ|小さじ|ポンド|オンス)/g, '$1$2');
      
      // 3. 翻訳漏れをチェック
      const untranslated = checkUntranslated(translated);
      if (untranslated.length > 0 && DEBUG_MODE) {
        console.warn(`⚠️ 翻訳漏れ detected:`, untranslated);
        
        // フォールバック：未翻訳の単語をカタカナに変換
        untranslated.forEach(word => {
          const katakana = toKatakana(word);
          const regex = new RegExp(`\\\\b${word}\\\\b`, 'gi');
          translated = translated.replace(regex, katakana);
        });
      }
      
      if (DEBUG_MODE) {
        console.log(`✅ [翻訳後 ${type}]:`, translated);
        if (untranslated.length > 0) {
          console.log(`🔄 [フォールバック適用]:`, translated);
        }
      }
      
      return translated;
    };
    
    return {
      translate,
      checkUntranslated,
      DEBUG_MODE
    };
  };
  
  // 翻訳システムのインスタンス作成
  const translationSystem = createTranslationSystem();
  
  const translateIngredient = (ingredient) => {
    return translationSystem.translate(ingredient, 'ingredient');
  };
  
  const translateMeasure = (measure) => {
    return translationSystem.translate(measure, 'measure');
  };
  
  const translateMealName = (name) => {
    return translationSystem.translate(name, 'meal');
  };
  
  const translateInstructions = (instructions) => {
    if (!instructions) return instructions;
    
    // 文字列の場合
    if (typeof instructions === 'string') {
      return translationSystem.translate(instructions, 'instructions');
    }
    
    // 配列の場合
    if (Array.isArray(instructions)) {
      return instructions.map((step, index) => {
        const translatedStep = translationSystem.translate(step, 'instructions');
        
        // ステップ番号を保持
        if (/^\d+\./.test(translatedStep)) {
          return translatedStep;
        } else if (/^\d+/.test(step)) {
          const num = step.match(/^(\d+)/)[1];
          return translatedStep.replace(/^\d+/, `${num}.`);
        }
        
        return translatedStep;
      });
    }
    
    return instructions;
  };
  
  
  // Clean up intervals on unmount
  useEffect(() => {
    return () => {
      Object.values(timerIntervals).forEach(interval => clearInterval(interval));
    };
  }, [timerIntervals]);

  const getAdjustedIngredients = (recipe) => {
      // 肉類
      'chicken': '鶏肉',
      'chicken breast': '鶏むね肉',
      'chicken thigh': '鶏もも肉',
      'chicken wing': '手羽先',
      'ground chicken': '鶏ひき肉',
      'beef': '牛肉',
      'ground beef': '牛ひき肉',
      'beef steak': '牛ステーキ',
      'pork': '豚肉',
      'pork belly': '豚バラ肉',
      'ground pork': '豚ひき肉',
      'bacon': 'ベーコン',
      'ham': 'ハム',
      'sausage': 'ソーセージ',
      'lamb': 'ラム肉',
      'duck': '鴨肉',
      'turkey': '七面鳥',
      'fish': '魚',
      'salmon': 'サーモン',
      'tuna': 'マグロ',
      'cod': 'タラ',
      'sea bass': 'スズキ',
      'mackerel': 'サバ',
      'sardine': 'イワシ',
      'shrimp': 'エビ',
      'prawns': 'エビ',
      'lobster': 'ロブスター',
      'crab': 'カニ',
      'scallop': 'ホタテ',
      'oyster': 'カキ',
      'clam': 'アサリ',
      'mussel': 'ムール貝',
      'squid': 'イカ',
      'octopus': 'タコ',
      // 野菜
      'onion': '玉ねぎ',
      'onions': '玉ねぎ',
      'red onion': '赤玉ねぎ',
      'green onion': '青ネギ',
      'spring onion': '青ネギ',
      'scallion': '青ネギ',
      'leek': '長ネギ',
      'garlic': 'にんにく',
      'garlic clove': 'にんにく片',
      'ginger': '生姜',
      'ginger root': '生姜',
      'tomato': 'トマト',
      'tomatoes': 'トマト',
      'cherry tomato': 'ミニトマト',
      'cherry tomatoes': 'ミニトマト',
      'baby plum tomato': 'ミニトマト',
      'baby plum tomatoes': 'ミニトマト',
      'plum tomato': 'プラムトマト',
      'plum tomatoes': 'プラムトマト',
      'potato': 'じゃがいも',
      'potatoes': 'じゃがいも',
      'sweet potato': 'さつまいも',
      'carrot': '人参',
      'carrots': '人参',
      'celery': 'セロリ',
      'lettuce': 'レタス',
      'iceberg lettuce': 'アイスバーグレタス',
      'romaine lettuce': 'ロメインレタス',
      'cabbage': 'キャベツ',
      'red cabbage': '紫キャベツ',
      'spinach': 'ほうれん草',
      'kale': 'ケール',
      'broccoli': 'ブロッコリー',
      'cauliflower': 'カリフラワー',
      'corn': 'とうもろこし',
      'baby corn': 'ヤングコーン',
      'peas': 'グリーンピース',
      'green peas': 'グリーンピース',
      'snow peas': 'さやえんどう',
      'bell pepper': 'パプリカ',
      'green pepper': 'ピーマン',
      'red pepper': '赤パプリカ',
      'yellow pepper': '黄パプリカ',
      'chili pepper': '唐辛子',
      'jalapeno': 'ハラペーニョ',
      'cucumber': 'きゅうり',
      'mushroom': 'マッシュルーム',
      'mushrooms': 'マッシュルーム',
      'shiitake': 'しいたけ',
      'shiitake mushroom': 'しいたけ',
      'enoki': 'えのき',
      'button mushroom': 'マッシュルーム',
      'zucchini': 'ズッキーニ',
      'eggplant': 'なす',
      'aubergine': 'なす',
      'pumpkin': 'かぼちゃ',
      'squash': 'かぼちゃ',
      'radish': '大根',
      'daikon': '大根',
      'turnip': 'かぶ',
      'beet': 'ビーツ',
      'beetroot': 'ビーツ',
      'asparagus': 'アスパラガス',
      'green beans': 'さやいんげん',
      'string beans': 'さやいんげん',
      'okra': 'オクラ',
      'brussels sprouts': '芽キャベツ',
      'artichoke': 'アーティチョーク',
      'fennel': 'フェンネル',
      // 果物
      'apple': 'りんご',
      'banana': 'バナナ',
      'strawberry': 'いちご',
      'strawberries': 'いちご',
      'blueberry': 'ブルーベリー',
      'blueberries': 'ブルーベリー',
      'raspberry': 'ラズベリー',
      'raspberries': 'ラズベリー',
      'blackberry': 'ブラックベリー',
      'blackberries': 'ブラックベリー',
      'pineapple': 'パイナップル',
      'mango': 'マンゴー',
      'papaya': 'パパイヤ',
      'avocado': 'アボカド',
      'grape': 'ぶどう',
      'grapes': 'ぶどう',
      'cherry': 'さくらんぼ',
      'cherries': 'さくらんぼ',
      'peach': '桃',
      'peaches': '桃',
      'pear': '洋なし',
      'pears': '洋なし',
      'plum': 'プラム',
      'apricot': 'アプリコット',
      'fig': 'いちじく',
      'date': 'デーツ',
      'watermelon': 'スイカ',
      'melon': 'メロン',
      'cantaloupe': 'カンタロープメロン',
      'honeydew': 'ハニーデューメロン',
      'kiwi': 'キウイ',
      'pomegranate': 'ザクロ',
      'passion fruit': 'パッションフルーツ',
      // ハーブ・香味野菜
      'basil': 'バジル',
      'fresh basil': 'フレッシュバジル',
      'dried basil': '乾燥バジル',
      'parsley': 'パセリ',
      'flat-leaf parsley': 'イタリアンパセリ',
      'cilantro': 'パクチー',
      'coriander leaves': 'パクチー',
      'mint': 'ミント',
      'fresh mint': 'フレッシュミント',
      'thyme': 'タイム',
      'fresh thyme': 'フレッシュタイム',
      'dried thyme': '乾燥タイム',
      'oregano': 'オレガノ',
      'fresh oregano': 'フレッシュオレガノ',
      'dried oregano': '乾燥オレガノ',
      'rosemary': 'ローズマリー',
      'fresh rosemary': 'フレッシュローズマリー',
      'sage': 'セージ',
      'tarragon': 'タラゴン',
      'dill': 'ディル',
      'chives': 'チャイブ',
      'bay leaf': 'ローリエ',
      'bay leaves': 'ローリエ',
      'lemongrass': 'レモングラス',
      'kaffir lime leaves': 'こぶみかんの葉',
      // 調味料・香辛料
      'salt': '塩',
      'sea salt': '海塩',
      'kosher salt': 'コーシャーソルト',
      'pepper': 'こしょう',
      'black pepper': '黒こしょう',
      'white pepper': '白こしょう',
      'red pepper flakes': '唐辛子フレーク',
      'chili powder': 'チリパウダー',
      'cayenne pepper': 'カイエンペッパー',
      'paprika': 'パプリカパウダー',
      'smoked paprika': 'スモークパプリカ',
      'cumin': 'クミン',
      'ground cumin': 'クミンパウダー',
      'cumin seeds': 'クミンシード',
      'coriander': 'コリアンダー',
      'ground coriander': 'コリアンダーパウダー',
      'coriander seeds': 'コリアンダーシード',
      'turmeric': 'ターメリック',
      'curry powder': 'カレー粉',
      'garam masala': 'ガラムマサラ',
      'cinnamon': 'シナモン',
      'ground cinnamon': 'シナモンパウダー',
      'cinnamon stick': 'シナモンスティック',
      'nutmeg': 'ナツメグ',
      'clove': 'クローブ',
      'cloves': 'クローブ',
      'cardamom': 'カルダモン',
      'star anise': '八角',
      'fennel seeds': 'フェンネルシード',
      'mustard seeds': 'マスタードシード',
      'fenugreek': 'フェヌグリーク',
      'saffron': 'サフラン',
      'vanilla': 'バニラ',
      'vanilla extract': 'バニラエッセンス',
      'vanilla bean': 'バニラビーンズ',
      // 調味料・ソース
      'soy sauce': '醤油',
      'light soy sauce': '薄口醤油',
      'dark soy sauce': '濃口醤油',
      'tamari': 'たまり醤油',
      'miso': '味噌',
      'miso paste': '味噌',
      'white miso': '白味噌',
      'red miso': '赤味噌',
      'vinegar': '酢',
      'rice vinegar': '米酢',
      'apple cider vinegar': 'リンゴ酢',
      'balsamic vinegar': 'バルサミコ酢',
      'white wine vinegar': '白ワインビネガー',
      'red wine vinegar': '赤ワインビネガー',
      'mirin': 'みりん',
      'sake': '日本酒',
      'cooking sake': '料理酒',
      'honey': 'はちみつ',
      'maple syrup': 'メープルシロップ',
      'agave': 'アガベシロップ',
      'molasses': 'モラセス',
      'mustard': 'マスタード',
      'dijon mustard': 'ディジョンマスタード',
      'whole grain mustard': '粒マスタード',
      'ketchup': 'ケチャップ',
      'tomato ketchup': 'トマトケチャップ',
      'mayonnaise': 'マヨネーズ',
      'worcestershire sauce': 'ウスターソース',
      'fish sauce': '魚醤',
      'oyster sauce': 'オイスターソース',
      'hoisin sauce': '海鮮醤',
      'sriracha': 'シラチャーソース',
      'hot sauce': 'ホットソース',
      'tabasco': 'タバスコ',
      'bbq sauce': 'バーベキューソース',
      'teriyaki sauce': '照り焼きソース',
      'ponzu': 'ポン酢',
      'tahini': 'タヒニ',
      'peanut butter': 'ピーナッツバター',
      'almond butter': 'アーモンドバター',
      // オイル・油脂
      'oil': '油',
      'olive oil': 'オリーブオイル',
      'extra virgin olive oil': 'エクストラバージンオリーブオイル',
      'vegetable oil': 'サラダ油',
      'canola oil': 'キャノーラ油',
      'sunflower oil': 'ひまわり油',
      'peanut oil': 'ピーナッツオイル',
      'sesame oil': 'ごま油',
      'coconut oil': 'ココナッツオイル',
      'butter': 'バター',
      'unsalted butter': '無塩バター',
      'salted butter': '有塩バター',
      'ghee': 'ギー',
      'margarine': 'マーガリン',
      'lard': 'ラード',
      'shortening': 'ショートニング',
      // 乳製品
      'milk': '牛乳',
      'whole milk': '全脂肪牛乳',
      'low-fat milk': '低脂肪牛乳',
      'skim milk': '無脂肪牛乳',
      'buttermilk': 'バターミルク',
      'cream': 'クリーム',
      'heavy cream': '生クリーム',
      'whipping cream': 'ホイップクリーム',
      'half and half': 'ハーフアンドハーフ',
      'sour cream': 'サワークリーム',
      'yogurt': 'ヨーグルト',
      'greek yogurt': 'ギリシャヨーグルト',
      'plain yogurt': 'プレーンヨーグルト',
      'cottage cheese': 'カッテージチーズ',
      'ricotta': 'リコッタチーズ',
      'cream cheese': 'クリームチーズ',
      'cheese': 'チーズ',
      'cheddar': 'チェダーチーズ',
      'cheddar cheese': 'チェダーチーズ',
      'mozzarella': 'モッツァレラチーズ',
      'mozzarella cheese': 'モッツァレラチーズ',
      'parmesan': 'パルメザンチーズ',
      'parmesan cheese': 'パルメザンチーズ',
      'swiss cheese': 'スイスチーズ',
      'gouda': 'ゴーダチーズ',
      'brie': 'ブリーチーズ',
      'camembert': 'カマンベールチーズ',
      'blue cheese': 'ブルーチーズ',
      'feta': 'フェタチーズ',
      'goat cheese': 'ゴートチーズ',
      // 穀物・粉類
      'rice': '米',
      'white rice': '白米',
      'brown rice': '玄米',
      'jasmine rice': 'ジャスミンライス',
      'basmati rice': 'バスマティライス',
      'wild rice': 'ワイルドライス',
      'sticky rice': 'もち米',
      'flour': '小麦粉',
      'all-purpose flour': '中力粉',
      'bread flour': '強力粉',
      'cake flour': '薄力粉',
      'whole wheat flour': '全粒粉',
      'self-raising flour': 'セルフレイジングフラワー',
      'cornmeal': 'コーンミール',
      'cornstarch': 'コーンスターチ',
      'potato starch': '片栗粉',
      'tapioca starch': 'タピオカ粉',
      'rice flour': '米粉',
      'bread': 'パン',
      'white bread': '食パン',
      'whole wheat bread': '全粒粉パン',
      'sourdough': 'サワードウ',
      'baguette': 'バゲット',
      'ciabatta': 'チャバタ',
      'pita': 'ピタパン',
      'naan': 'ナン',
      'tortilla': 'トルティーヤ',
      'breadcrumbs': 'パン粉',
      'panko': 'パン粉',
      // パスタ・麺類
      'pasta': 'パスタ',
      'spaghetti': 'スパゲッティ',
      'linguine': 'リングイネ',
      'fettuccine': 'フェットチーネ',
      'penne': 'ペンネ',
      'rigatoni': 'リガトーニ',
      'fusilli': 'フジッリ',
      'farfalle': 'ファルファッレ（蝶々パスタ）',
      'orecchiette': 'オレキエッテ',
      'macaroni': 'マカロニ',
      'lasagna': 'ラザニア',
      'lasagna sheets': 'ラザニアシート',
      'ravioli': 'ラビオリ',
      'tortellini': 'トルテリーニ',
      'gnocchi': 'ニョッキ',
      'noodles': '麺',
      'egg noodles': '卵麺',
      'rice noodles': 'ライスヌードル',
      'soba': 'そば',
      'udon': 'うどん',
      'ramen': 'ラーメン',
      'glass noodles': '春雨',
      'vermicelli': 'ビーフン',
      // 豆類
      'beans': '豆',
      'black beans': '黒豆',
      'kidney beans': 'レッドキドニービーンズ',
      'pinto beans': 'ピント豆',
      'navy beans': 'ネイビービーンズ',
      'cannellini beans': 'カネリーニ豆',
      'lima beans': 'ライマ豆',
      'chickpeas': 'ひよこ豆',
      'garbanzo beans': 'ひよこ豆',
      'lentils': 'レンズ豆',
      'red lentils': '赤レンズ豆',
      'green lentils': '緑レンズ豆',
      'split peas': 'スプリットピー',
      'soy beans': '大豆',
      'edamame': '枝豆',
      'tofu': '豆腐',
      'silken tofu': '絹ごし豆腐',
      'firm tofu': '木綿豆腐',
      'tempeh': 'テンペ',
      // ナッツ・種実類
      'almond': 'アーモンド',
      'almonds': 'アーモンド',
      'walnut': 'くるみ',
      'walnuts': 'くるみ',
      'cashew': 'カシューナッツ',
      'cashews': 'カシューナッツ',
      'peanut': 'ピーナッツ',
      'peanuts': 'ピーナッツ',
      'pecan': 'ピーカン',
      'pecans': 'ピーカン',
      'macadamia': 'マカダミアナッツ',
      'hazelnut': 'ヘーゼルナッツ',
      'pine nuts': '松の実',
      'pistachio': 'ピスタチオ',
      'sesame': 'ごま',
      'sesame seeds': 'ごま',
      'poppy seeds': 'ポピーシード',
      'sunflower seeds': 'ひまわりの種',
      'pumpkin seeds': 'かぼちゃの種',
      'chia seeds': 'チアシード',
      'flax seeds': '亜麻仁',
      'flaxseed': '亜麻仁',
      // その他の材料
      'egg': '卵',
      'eggs': '卵',
      'egg white': '卵白',
      'egg yolk': '卵黄',
      'sugar': '砂糖',
      'granulated sugar': 'グラニュー糖',
      'caster sugar': '上白糖',
      'powdered sugar': '粉糖',
      'confectioners sugar': '粉糖',
      'brown sugar': 'ブラウンシュガー',
      'light brown sugar': 'ライトブラウンシュガー',
      'dark brown sugar': 'ダークブラウンシュガー',
      'palm sugar': 'パームシュガー',
      'coconut sugar': 'ココナッツシュガー',
      'water': '水',
      'ice': '氷',
      'stock': 'だし',
      'broth': 'ブイヨン',
      'chicken stock': 'チキンスープ',
      'chicken broth': 'チキンブイヨン',
      'beef stock': 'ビーフスープ',
      'beef broth': 'ビーフブイヨン',
      'vegetable stock': '野菜スープ',
      'vegetable broth': '野菜ブイヨン',
      'dashi': 'だし',
      'wine': 'ワイン',
      'red wine': '赤ワイン',
      'white wine': '白ワイン',
      'beer': 'ビール',
      'coconut milk': 'ココナッツミルク',
      'coconut cream': 'ココナッツクリーム',
      'evaporated milk': 'エバミルク',
      'condensed milk': 'コンデンスミルク',
      // ベーキング材料
      'baking powder': 'ベーキングパウダー',
      'baking soda': '重曹',
      'yeast': 'イースト',
      'dry yeast': 'ドライイースト',
      'active dry yeast': 'アクティブドライイースト',
      'instant yeast': 'インスタントイースト',
      'gelatin': 'ゼラチン',
      'agar': '寒天',
      'cocoa': 'ココア',
      'cocoa powder': 'ココアパウダー',
      'chocolate': 'チョコレート',
      'dark chocolate': 'ダークチョコレート',
      'milk chocolate': 'ミルクチョコレート',
      'white chocolate': 'ホワイトチョコレート',
      'chocolate chips': 'チョコチップ',
      // パン・ペストリー関連  
      'phyllo': 'フィロ',
      'phyllo dough': 'フィロ生地',
      'puff pastry': 'パイ生地',
      'pie crust': 'パイ生地',
      'pizza dough': 'ピザ生地'
    };
    
    let translated = ingredient.toLowerCase();
    
    // 長い語句から変換（例："extra virgin olive oil" を "olive oil" より先に）
    const sortedTranslations = Object.entries(translations)
      .sort(([a], [b]) => b.length - a.length);
    
    sortedTranslations.forEach(([en, jp]) => {
      const regex = new RegExp(`\\b${en}\\b`, 'gi');
      translated = translated.replace(regex, jp);
    });
    
    return translated;
  };
  
  const translateArea = (area) => {
    if (!area) return '';
    const areas = {
      'American': 'アメリカ',
      'British': 'イギリス',
      'Canadian': 'カナダ',
      'Chinese': '中華',
      'Croatian': 'クロアチア',
      'Dutch': 'オランダ',
      'Egyptian': 'エジプト',
      'French': 'フランス',
      'Greek': 'ギリシャ',
      'Indian': 'インド',
      'Irish': 'アイルランド',
      'Italian': 'イタリア',
      'Jamaican': 'ジャマイカ',
      'Japanese': '日本',
      'Kenyan': 'ケニア',
      'Malaysian': 'マレーシア',
      'Mexican': 'メキシコ',
      'Moroccan': 'モロッコ',
      'Polish': 'ポーランド',
      'Portuguese': 'ポルトガル',
      'Russian': 'ロシア',
      'Spanish': 'スペイン',
      'Thai': 'タイ',
      'Tunisian': 'チュニジア',
      'Turkish': 'トルコ',
      'Unknown': 'その他',
      'Vietnamese': 'ベトナム'
    };
    return areas[area] || area;
  };
  
  const translateCategory = (category) => {
    if (!category) return '';
    const categories = {
      'Beef': 'ビーフ',
      'Breakfast': '朝食',
      'Chicken': 'チキン',
      'Dessert': 'デザート',
      'Goat': 'ヤギ肉',
      'Lamb': 'ラム',
      'Miscellaneous': 'その他',
      'Pasta': 'パスタ',
      'Pork': 'ポーク',
      'Seafood': 'シーフード',
      'Side': 'サイドディッシュ',
      'Starter': '前菜',
      'Vegan': 'ビーガン',
      'Vegetarian': 'ベジタリアン'
    };
    return categories[category] || category;
  };
  
  const translateMealName = (name) => {
    const translations = {
      // 料理のベース材料
      'chicken': '鶏肉',
      'beef': '牛肉',
      'pork': '豚肉',
      'lamb': 'ラム',
      'fish': '魚',
      'seafood': 'シーフード',
      'shrimp': 'エビ',
      'salmon': 'サーモン',
      'tuna': 'マグロ',
      'vegetable': '野菜',
      'meat': '肉',
      // 料理の種類
      'curry': 'カレー',
      'rice': 'ライス',
      'fried rice': 'チャーハン',
      'noodle': 'ヌードル',
      'noodles': 'ヌードル',
      'soup': 'スープ',
      'salad': 'サラダ',
      'stew': 'シチュー',
      'pasta': 'パスタ',
      'spaghetti': 'スパゲッティ',
      'lasagna': 'ラザニア',
      'sandwich': 'サンドイッチ',
      'burger': 'バーガー',
      'hamburger': 'ハンバーガー',
      'pizza': 'ピザ',
      'pie': 'パイ',
      'tart': 'タルト',
      'quiche': 'キッシュ',
      'casserole': 'キャセロール',
      'gratin': 'グラタン',
      'risotto': 'リゾット',
      'paella': 'パエリア',
      'kebab': 'ケバブ',
      'tacos': 'タコス',
      'burrito': 'ブリトー',
      'enchilada': 'エンチラーダ',
      'fajita': 'ファヒータ',
      'quesadilla': 'ケサディーヤ',
      // 調理法
      'grilled': 'グリル',
      'fried': 'フライド',
      'baked': 'ベイクド',
      'roasted': 'ロースト',
      'steamed': '蒸し',
      'stir-fried': '炒め',
      'stir fry': '炒め',
      'teriyaki': '照り焼き',
      'tempura': '天ぷら',
      'karaage': '唐揚げ',
      'katsu': 'カツ',
      'sauteed': 'ソテー',
      'braised': '煮込み',
      'poached': 'ポーチド',
      'smoked': 'スモーク',
      'barbecue': 'バーベキュー',
      'bbq': 'BBQ',
      'asado': 'アサード',
      'carne asada': 'カルネアサーダ',
      // 地域料理
      'mediterranean': '地中海風',
      'italian': 'イタリアン',
      'french': 'フレンチ',
      'spanish': 'スペイン風',
      'greek': 'ギリシャ風',
      'mexican': 'メキシカン',
      'thai': 'タイ風',
      'chinese': '中華風',
      'japanese': '和風',
      'korean': '韓国風',
      'indian': 'インド風',
      'vietnamese': 'ベトナム風',
      'moroccan': 'モロッコ風',
      'middle eastern': '中東風',
      'american': 'アメリカン',
      'british': 'ブリティッシュ',
      'german': 'ドイツ風',
      // その他の料理名
      'breakfast': '朝食',
      'lunch': 'ランチ',
      'dinner': 'ディナー',
      'appetizer': '前菜',
      'main': 'メイン',
      'dessert': 'デザート',
      'snack': 'スナック',
      'side dish': 'サイドディッシュ',
      'hot pot': '鍋',
      'bowl': 'ボウル',
      'wrap': 'ラップ',
      'roll': 'ロール',
      'spring roll': '春巻き',
      'egg roll': '卵巻き',
      'dumpling': '餃子',
      'meatball': 'ミートボール',
      'meatloaf': 'ミートローフ',
      'omelet': 'オムレツ',
      'omelette': 'オムレツ',
      'frittata': 'フリッタータ',
      'pancake': 'パンケーキ',
      'crepe': 'クレープ',
      'waffle': 'ワッフル',
      'toast': 'トースト',
      'bruschetta': 'ブルスケッタ',
      'crostini': 'クロスティーニ',
      // スタイル・特徴
      'spicy': 'スパイシー',
      'sweet': 'スイート',
      'sour': 'サワー',
      'savory': 'セイボリー',
      'crispy': 'クリスピー',
      'creamy': 'クリーミー',
      'healthy': 'ヘルシー',
      'light': 'ライト',
      'rich': 'リッチ',
      'classic': 'クラシック',
      'traditional': '伝統的な',
      'modern': 'モダン',
      'fusion': 'フュージョン',
      'homemade': '自家製',
      'authentic': '本格',
      'quick': 'クイック',
      'easy': '簡単',
      'simple': 'シンプル'
    };
    
    let translated = name;
    
    // 長い語句から変換（例："stir-fried" を "fried" より先に）
    const sortedTranslations = Object.entries(translations)
      .sort(([a], [b]) => b.length - a.length);
    
    sortedTranslations.forEach(([en, jp]) => {
      translated = translated.replace(new RegExp(`\\b${en}\\b`, 'gi'), jp);
    });
    
    // "and" と "&" を "と" に変換
    translated = translated.replace(/\s+and\s+/gi, 'と');
    translated = translated.replace(/\s*&\s*/g, 'と');
    
    // "with" を "〜入り" または "〜添え" に変換
    translated = translated.replace(/\s+with\s+/gi, '〜');
    
    // "in" を "〜風" に変換（ソースの場合）
    translated = translated.replace(/\s+in\s+(\S+)\s+sauce/gi, '〜$1ソース');
    
    return translated;
  };
  
  const translateInstructions = (instructions) => {
    if (!instructions) return instructions;
    
    const cookingTerms = {
      // 基本的な調理動作
      'heat': '加熱する',
      'preheat': '予熱する',
      'cook': '調理する',
      'prepare': '準備する',
      'make': '作る',
      'create': '作る',
      'put': '入れる',
      'put the': '〜を入れる',
      'place': '置く',
      'turn': 'ひっくり返す',
      'turn the': '〜をひっくり返す',
      'continue': '続ける',
      'over': '〜の上に',
      'cover': '蓋をする',
      'cover the pot': '鍋に蓋をする',
      'let': '〜させる',
      'set aside': '取り置く',
      'bring': '沸騰させる',
      'bring to': '〜にする',
      'bring to a boil': '沸騰させる',
      // 加熱調理
      'boil': '茹でる',
      'simmer': '弱火で煮る',
      'steam': '蒸す',
      'blanch': '湯通しする',
      'poach': '落とし卵にする',
      'braise': '煮込む',
      'stew': '煮込む',
      // 炒め・焼き
      'fry': '揚げる',
      'deep fry': '揚げる',
      'shallow fry': '少ない油で焼く',
      'stir fry': '炒める',
      'stir-fry': '炒める',
      'saute': 'ソテーする',
      'sauté': 'ソテーする',
      'pan fry': 'フライパンで焼く',
      'pan-fry': 'フライパンで焼く',
      'sear': '表面を焼く',
      'brown': 'こんがり焼く',
      'caramelize': 'カラメル状にする',
      // オーブン調理
      'bake': 'オーブンで焼く',
      'roast': 'ローストする',
      'broil': '直火で焼く',
      'grill': 'グリルで焼く',
      'barbecue': 'バーベキューする',
      'toast': 'トーストする',
      // 切る・処理
      'cut': '切る',
      'slice': 'スライスする',
      'dice': 'さいの目切りにする',
      'chop': '刻む',
      'mince': 'みじん切りにする',
      'julienne': '千切りにする',
      'shred': '細切りにする',
      'grate': 'すりおろす',
      'peel': '皮をむく',
      'trim': '整える',
      'core': '芯を取る',
      'devein': '背わたを取る',
      'butterfly': '開きにする',
      // 混ぜる・合わせる
      'mix': '混ぜる',
      'stir': 'かき混ぜる',
      'blend': 'ブレンドする',
      'combine': '合わせる',
      'fold': 'さっくり混ぜる',
      'fold in': 'さっくり混ぜる',
      'whisk': '泡立てる',
      'beat': '混ぜる',
      'whip': '泡立てる',
      'knead': 'こねる',
      'toss': '和える',
      'coat': 'まぶす',
      // 調味・味付け
      'season': '味付けする',
      'season with': '〜で味付けする',
      'add': '加える',
      'pour': '注ぐ',
      'drizzle': 'かける',
      'sprinkle': '振りかける',
      'garnish': '飾る',
      'marinate': 'マリネする',
      'marinade': 'マリネ液',
      'baste': '肉汁をかける',
      'glaze': 'つやを出す',
      'taste': '味見する',
      'adjust': '調整する',
      // その他の動作
      'drain': '水を切る',
      'strain': 'こす',
      'sift': 'ふるう',
      'melt': '溶かす',
      'dissolve': '溶かす',
      'cool': '冷ます',
      'chill': '冷やす',
      'refrigerate': '冷蔵する',
      'freeze': '冷凍する',
      'thaw': '解凍する',
      'rest': '休ませる',
      'let stand': 'そのまま置く',
      'set aside': '取り置く',
      'serve': '盛り付ける',
      'plate': '皿に盛る',
      'arrange': '並べる',
      'transfer': '移す',
      'remove': '取り除く',
      'discard': '捨てる',
      'reserve': '取っておく',
      'repeat': '繰り返す',
      'continue': '続ける',
      // 時間・状態
      'for': '〜間',
      'until': '〜まで',
      'about': '約',
      'approximately': '約',
      'minutes': '分',
      'minute': '分',
      'hours': '時間',
      'hour': '時間',
      'seconds': '秒',
      'occasionally': '時々',
      'frequently': '頻繁に',
      'constantly': '絶えず',
      'immediately': 'すぐに',
      'gradually': '徐々に',
      'slowly': 'ゆっくり',
      'quickly': '素早く',
      'gently': '優しく',
      'carefully': '注意深く',
      'thoroughly': 'しっかり',
      'completely': '完全に',
      'evenly': '均等に',
      'lightly': '軽く',
      'heavily': 'たっぷり',
      'until golden': 'きつね色になるまで',
      'until golden brown': 'きつね色になるまで',
      'until tender': '柔らかくなるまで',
      'until soft': '柔らかくなるまで',
      'until crispy': 'カリカリになるまで',
      'until melted': '溶けるまで',
      'until smooth': 'なめらかになるまで',
      'until combined': '混ざるまで',
      'until fragrant': '香りが立つまで',
      'al dente': 'アルデンテ',
      // 調理器具
      'in a': '〜で',
      'in the': '〜で',
      'on a': '〜の上で',
      'on the': '〜の上で',
      'pan': 'フライパン',
      'pot': '鍋',
      'skillet': 'スキレット',
      'saucepan': '片手鍋',
      'wok': '中華鍋',
      'oven': 'オーブン',
      'microwave': '電子レンジ',
      'bowl': 'ボウル',
      'plate': '皿',
      'dish': '皿',
      'baking dish': '耐熱皿',
      'baking sheet': '天板',
      'cutting board': 'まな板',
      'knife': 'ナイフ',
      'spoon': 'スプーン',
      'fork': 'フォーク',
      'spatula': 'ヘラ',
      'whisk': '泡立て器',
      'tongs': 'トング',
      'ladle': 'お玉',
      'strainer': 'ざる',
      'colander': 'コランダー',
      'measuring cup': '計量カップ',
      'measuring spoon': '計量スプーン',
      // 温度・火加減
      'high heat': '強火',
      'medium-high heat': '中強火',
      'medium heat': '中火',
      'medium-low heat': '中弱火',
      'low heat': '弱火',
      'simmer': 'とろ火',
      'gentle heat': '弱火',
      'bring to a boil': '沸騰させる',
      'bring to a simmer': '弱火にする',
      'reduce heat': '火を弱める',
      'increase heat': '火を強める',
      'turn off heat': '火を止める',
      'remove from heat': '火からおろす',
      // 温度
      'degrees': '度',
      'fahrenheit': '華氏',
      'celsius': '摂氏',
      'room temperature': '常温',
      'lukewarm': 'ぼんやり温かい',
      'warm': '温かい',
      'hot': '熱い',
      'cold': '冷たい',
      'chilled': '冷やした',
      'frozen': '冷凍の',
      // 接続詞・前置詞
      'and': 'そして',
      'or': 'または',
      'with': '〜と一緒に',
      'without': '〜なしで',
      'into': '〜に',
      'onto': '〜の上に',
      'over': '〜の上に',
      'under': '〜の下に',
      'through': '〜を通して',
      'between': '〜の間に',
      'among': '〜の中に',
      'from': '〜から',
      'to': '〜に',
      'in half': '半分に',
      'in thirds': '3等分に',
      'in quarters': '4等分に',
      'lengthwise': '縦に',
      'crosswise': '横に',
      'diagonally': '斜めに',
      // 追加の重要な語句
      'the same': '同じ',
      'opposite': '反対',
      'opposite side': '反対側',
      'side': '側',
      'clean plate': '清潔な皿',
      'clean': '清潔な',
      'along with': '〜と一緒に',
      'remaining': '残りの',
      'marinated': 'マリネした',
      'cube': '角切り',
      'cubes': '角切り',
      'soften': '柔らかくする',
      'softens': '柔らかくなる',
      'reduces': '煮詰まる',
      'reduce': '煮詰める',
      'melt': '溶ける',
      'melts': '溶ける',
      'where': '〜したところで',
      'where the': '〜したところで',
      'doing': 'する',
      'browns': 'こんがり焼ける',
      'fried': '炒めた',
      'was': 'だった',
      'from the pan': 'フライパンから',
      'from': '〜から',
      'on a': '〜の上に',
      'on the': '〜の上に',
      'do the same': '同じようにする',
      'set': '置く',
      'save': '取っておく',
      'sauce': 'ソース',
      'in the sauce': 'ソースに',
      'let it': 'そのまま〜させる',
      'until it': '〜まで',
      'mix': '混ぜる',
      'remove from the pan': 'フライパンから取り出す',
      'remove from': '〜から取り出す',
      'remove': '取り出す',
      'tablespoons': '大さじ',
      'tablespoon': '大さじ',
      'and let it': 'そして〜させる',
      'until': '〜まで'
    };
    
    // 文字列の場合の処理
    if (typeof instructions === 'string') {
      let translated = instructions;
      
      // 最初に材料名を翻訳
      translated = translateIngredient(translated);
      
      // 長いフレーズから順に翻訳
      const sortedTerms = Object.entries(cookingTerms)
        .sort(([a], [b]) => b.length - a.length);
      
      sortedTerms.forEach(([en, jp]) => {
        const regex = new RegExp(`\\b${en}\\b`, 'gi');
        translated = translated.replace(regex, jp);
      });
      
      return translated;
    }
    
    // 配列の場合の処理
    if (Array.isArray(instructions)) {
      const translatedArray = instructions.map(step => {
        let translated = step;
        
        // 最初に材料名を翻訳
        translated = translateIngredient(translated);
        
        // 長いフレーズから順に翻訳
        const sortedTerms = Object.entries(cookingTerms)
          .sort(([a], [b]) => b.length - a.length);
        
        sortedTerms.forEach(([en, jp]) => {
          const regex = new RegExp(`\\b${en}\\b`, 'gi');
          translated = translated.replace(regex, jp);
        });
        
        // ステップ番号を保持
        if (/^\d+\./.test(translated)) {
          return translated;
        } else if (/^\d+/.test(step)) {
          // 番号だけの場合
          const num = step.match(/^(\d+)/)[1];
          return translated.replace(/^\d+/, `${num}.`);
        }
        
        return translated;
      });
      
      return translatedArray;
    }
    
    return instructions;
  };

  // Clean up intervals on unmount
  useEffect(() => {
    return () => {
      Object.values(timerIntervals).forEach(interval => clearInterval(interval));
    };
  }, [timerIntervals]);


  const getAdjustedIngredients = (recipe) => {
    const servings = selectedServings[recipe.id] || recipe.servings;
    if (servings === recipe.servings) return recipe.ingredients;
    
    return recipe.ingredients.map(ingredient => {
      // Pattern for Japanese format: "材料名 数量単位"
      const match = ingredient.match(/^(.+?)\s+([\d./]+)(g|ml|個|本|片|膳分|丁|箱|枚|つ|人分)?$/);
      if (match) {
        const [, name, quantity, unit = ''] = match;
        const ratio = servings / recipe.servings;
        
        // Handle fractions
        if (quantity.includes('/')) {
          const [numerator, denominator] = quantity.split('/').map(Number);
          const decimal = numerator / denominator;
          const newDecimal = decimal * ratio;
          
          // Convert back to fraction if it's a simple fraction
          if (newDecimal === 0.5) return `${name} 1/2${unit}`;
          if (newDecimal === 0.25) return `${name} 1/4${unit}`;
          if (newDecimal === 0.75) return `${name} 3/4${unit}`;
          if (newDecimal === 1.5) return `${name} 1と1/2${unit}`;
          if (newDecimal === 1) return `${name} 1${unit}`;
          if (newDecimal === 2) return `${name} 2${unit}`;
          
          // Otherwise use decimal
          return `${name} ${Math.round(newDecimal * 10) / 10}${unit}`;
        }
        
        // Handle regular numbers
        const num = parseFloat(quantity);
        const newNum = num * ratio;
        const rounded = Math.round(newNum * 10) / 10;
        
        return `${name} ${rounded}${unit}`;
      }
      
      // Pattern for measurements like "大さじ2", "小さじ1"
      const measureMatch = ingredient.match(/^(.+?)(大さじ|小さじ|カップ)([\d./]+)(.*)$/);
      if (measureMatch) {
        const [, name, measure, quantity, rest] = measureMatch;
        const ratio = servings / recipe.servings;
        
        // Handle fractions
        if (quantity.includes('/')) {
          const [numerator, denominator] = quantity.split('/').map(Number);
          const decimal = numerator / denominator;
          const newDecimal = decimal * ratio;
          
          // Convert back to fraction if it's a simple fraction
          if (newDecimal === 0.5) return `${name}${measure}1/2${rest}`;
          if (newDecimal === 0.25) return `${name}${measure}1/4${rest}`;
          if (newDecimal === 0.75) return `${name}${measure}3/4${rest}`;
          if (newDecimal === 1.5) return `${name}${measure}1と1/2${rest}`;
          
          // Otherwise use decimal
          return `${name}${measure}${Math.round(newDecimal * 10) / 10}${rest}`;
        }
        
        // Handle regular numbers
        const num = parseFloat(quantity);
        const newNum = num * ratio;
        const rounded = Math.round(newNum * 10) / 10;
        
        return `${name}${measure}${rounded}${rest}`;
      }
      
      return ingredient;
    });
  };

  const RecipeSection = ({ title, recipes, icon }) => (
    <div className="recipe-section">
      <h3 className="section-title-netflix">
        {icon} {title}
      </h3>
      <div className="recipe-carousel">
        <div className="carousel-container">
          {recipes.map(recipe => (
            <div 
              key={recipe.id} 
              className="netflix-recipe-card"
              onClick={() => openRecipe(recipe)}
            >
              <div className="netflix-card-image">
                <img src={recipe.image} alt={recipe.name} />
                {recipe.isWorldRecipe && (
                  <div className="world-badge-netflix">🌍</div>
                )}
                {openRecipes.find(r => r.id === recipe.id) && (
                  <div className="opened-badge-netflix">開いています</div>
                )}
              </div>
              <div className="netflix-card-info">
                <h4>{recipe.name}</h4>
                <div className="netflix-card-meta">
                  <span className="time">{recipe.cookingTime}</span>
                  <span className="difficulty">{recipe.difficulty}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  
  const renderHome = () => (
    <div className="home-content">
      {/* カテゴリータブ */}
      <div className="category-section">
        <div className="category-tabs">
          {categories.map(category => (
            <button
              key={category}
              className={`category-tab ${selectedCategory === category ? 'active' : ''}`}
              onClick={() => setSelectedCategory(category)}
            >
              {category}
            </button>
          ))}
        </div>
      </div>
      
      {/* アクティブフィルター表示 */}
      {getActiveFilterText() && (
        <div className="active-filters">
          <span className="filter-text">{getActiveFilterText()}</span>
        </div>
      )}
      
      {/* Netflix風カルーセルセクション */}
      {!searchQuery && selectedCategory === 'すべて' && !selectedIngredient && (
        <div className="netflix-sections">
          {sectionRecipes.summer.length > 0 && (
            <RecipeSection 
              title="夏にぴったり" 
              recipes={sectionRecipes.summer} 
              icon="🌞" 
            />
          )}
          
          {sectionRecipes.quick.length > 0 && (
            <RecipeSection 
              title="15分以内で完成" 
              recipes={sectionRecipes.quick} 
              icon="⏰" 
            />
          )}
          
          {sectionRecipes.popular.length > 0 && (
            <RecipeSection 
              title="今週の人気" 
              recipes={sectionRecipes.popular} 
              icon="🔥" 
            />
          )}
          
          {sectionRecipes.withEgg.length > 0 && (
            <RecipeSection 
              title="卵を使った料理" 
              recipes={sectionRecipes.withEgg} 
              icon="🍳" 
            />
          )}
          
          {sectionRecipes.hearty.length > 0 && (
            <RecipeSection 
              title="ボリューム満点" 
              recipes={sectionRecipes.hearty} 
              icon="🥘" 
            />
          )}
          
          {sectionRecipes.healthy.length > 0 && (
            <RecipeSection 
              title="ヘルシー料理" 
              recipes={sectionRecipes.healthy} 
              icon="🥗" 
            />
          )}
        </div>
      )}
      
      {/* レシピ一覧 */}
      <div className="recipes-section">
        {(searchQuery || selectedCategory !== 'すべて' || selectedIngredient) && (
          <h3 className="section-title">
            {filteredRecipes.length}件のレシピが見つかりました
          </h3>
        )}
        
        {filteredRecipes.length === 0 ? (
          <div className="no-results">
            <div className="no-results-icon">🔍</div>
            <h3>レシピが見つかりませんでした</h3>
            <p>検索条件を変更してみてください</p>
            <button className="clear-filters-btn" onClick={clearFilters}>
              絞り込みをクリア
            </button>
          </div>
        ) : (
          <div className="recipe-grid">
            {filteredRecipes.map(recipe => (
              <div 
                key={recipe.id} 
                className="recipe-card"
                onClick={() => openRecipe(recipe)}
              >
                <div className="recipe-image">
                  <img src={recipe.image} alt={recipe.name} />
                  {recipe.isWorldRecipe && (
                    <div className="world-recipe-badge">🌍</div>
                  )}
                  {openRecipes.find(r => r.id === recipe.id) && (
                    <div className="opened-badge">開いています</div>
                  )}
                  {memos[recipe.id] && (
                    <div className="memo-badge">📝</div>
                  )}
                  <button 
                    className={`bookmark-btn ${bookmarks.includes(recipe.id) ? 'bookmarked' : ''}`}
                    onClick={(e) => {
                      e.stopPropagation();
                      toggleBookmark(recipe.id);
                    }}
                  >
                    ♡
                  </button>
                </div>
                <div className="recipe-info">
                  <h3>{recipe.name}</h3>
                  <p>{recipe.description}</p>
                  <div className="recipe-meta">
                    <span className="time">⏰ {recipe.cookingTime}</span>
                    <span className="difficulty">{recipe.difficulty}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
      
      {/* インフィニットスクロール用ローディング表示 */}
      {!searchQuery && selectedCategory === 'すべて' && !selectedIngredient && isLoadingWorldRecipes && (
        <div className="infinite-loading">
          <div className="loading-spinner"></div>
          <p>新しいレシピを読み込み中...</p>
        </div>
      )}
    </div>
  );

  const renderSearch = () => (
    <div className="search-content">
      <div className="search-header">
        <h2>レシピを検索</h2>
        <div className="search-bar">
          <input
            type="text"
            placeholder="料理名、材料で検索..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="search-input"
          />
        </div>
      </div>
      <div className="recipe-grid">
        {filteredRecipes.map(recipe => (
          <div 
            key={recipe.id} 
            className="recipe-card"
            onClick={() => openRecipe(recipe)}
          >
            <div className="recipe-image">
              <img src={recipe.image} alt={recipe.name} />
              {openRecipes.find(r => r.id === recipe.id) && (
                <div className="opened-badge">開いています</div>
              )}
              {memos[recipe.id] && (
                <div className="memo-badge">📝</div>
              )}
            </div>
            <div className="recipe-info">
              <h3>{recipe.name}</h3>
              <p>{recipe.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  const renderBookmarks = () => (
    <div className="bookmarks-content">
      <h2>お気に入り</h2>
      {bookmarkedRecipes.length === 0 ? (
        <div className="empty-bookmarks">
          <p>まだお気に入りのレシピがありません</p>
        </div>
      ) : (
        <div className="recipe-grid">
          {bookmarkedRecipes.map(recipe => (
            <div 
              key={recipe.id} 
              className="recipe-card"
              onClick={() => openRecipe(recipe)}
            >
              <div className="recipe-image">
                <img src={recipe.image} alt={recipe.name} />
                {openRecipes.find(r => r.id === recipe.id) && (
                  <div className="opened-badge">開いています</div>
                )}
                {memos[recipe.id] && (
                  <div className="memo-badge">📝</div>
                )}
              </div>
              <div className="recipe-info">
                <h3>{recipe.name}</h3>
                <p>{recipe.description}</p>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );

  const renderTabBar = () => {
    if (openRecipes.length === 0) return null;
    
    return (
      <div className="tab-bar">
        <button 
          className="back-to-list-btn"
          onClick={() => {
            setShowRecipeList(true);
          }}
        >
          ← 一覧
        </button>
        <div className="tabs-container">
          {openRecipes.map((recipe, index) => (
            <div 
              key={recipe.id}
              className={`recipe-tab ${index === activeRecipeIndex ? 'active' : ''}`}
              onClick={() => switchToRecipe(index)}
            >
              <span className="tab-title">{recipe.name}</span>
              <button 
                className="tab-close"
                onClick={(e) => {
                  e.stopPropagation();
                  closeRecipe(index);
                }}
              >
                ×
              </button>
            </div>
          ))}
        </div>
        <button 
          className="close-all-btn"
          onClick={() => {
            setOpenRecipes([]);
            setShowRecipeList(true);
          }}
        >
          すべて閉じる
        </button>
      </div>
    );
  };

  if (openRecipes.length > 0 && !showRecipeList) {
    const selectedRecipe = getCurrentRecipe();
    if (!selectedRecipe) return null;

    return (
      <div className="App mobile-app">
        <div className="recipe-detail-fullscreen">
          {renderTabBar()}
          <div className="recipe-header">
            <button 
              className={`bookmark-btn ${bookmarks.includes(selectedRecipe.id) ? 'bookmarked' : ''}`}
              onClick={() => toggleBookmark(selectedRecipe.id)}
            >
              ♡
            </button>
            <button 
              className={`cooking-mode-btn ${cookingMode ? 'active' : ''}`}
              onClick={toggleCookingMode}
            >
              👨‍🍳 {cookingMode ? '調理中' : '調理開始'}
            </button>
          </div>
          
          {cookingMode && (
            <div className="cooking-progress-bar">
              <div className="progress-header">
                <span>ステップ {currentStep + 1} / {selectedRecipe.instructions.length}</span>
                <div className="step-controls">
                  <button 
                    className="step-btn prev" 
                    onClick={prevStep}
                    disabled={currentStep === 0}
                  >
                    ← 前
                  </button>
                  <button 
                    className="step-btn next" 
                    onClick={nextStep}
                    disabled={currentStep === selectedRecipe.instructions.length - 1}
                  >
                    次 →
                  </button>
                </div>
              </div>
              <div className="progress-line">
                <div 
                  className="progress-fill" 
                  style={{width: `${((currentStep + 1) / selectedRecipe.instructions.length) * 100}%`}}
                ></div>
              </div>
            </div>
          )}

          <div className="recipe-hero">
            <img src={selectedRecipe.image} alt={selectedRecipe.name} />
            <div className="recipe-hero-content">
              <h1>{selectedRecipe.name}</h1>
              <p>{selectedRecipe.description}</p>
              <div className="recipe-stats">
                <span className="time">⏰ {selectedRecipe.cookingTime}</span>
                <span className="difficulty">{selectedRecipe.difficulty}</span>
              </div>
            </div>
          </div>

          <div className="recipe-content">
            <div className="ingredients-section">
              <div className="servings-selector">
                <span className="servings-label">人数：</span>
                <div className="servings-buttons">
                  {[1, 2, 3, 4].map(num => (
                    <button
                      key={num}
                      className={`serving-btn ${(selectedServings[selectedRecipe.id] || selectedRecipe.servings) === num ? 'active' : ''}`}
                      onClick={() => setSelectedServings(prev => ({
                        ...prev,
                        [selectedRecipe.id]: num
                      }))}
                    >
                      {num}人分
                    </button>
                  ))}
                </div>
              </div>
              <div className="ingredients-header">
                <h3>材料</h3>
                <div className="ingredients-progress">
                  <span className="progress-text">
                    {getCheckedCount(selectedRecipe.id, selectedRecipe.ingredients.length)}/
                    {selectedRecipe.ingredients.length} 完了
                  </span>
                  <div className="ingredients-controls">
                    <button 
                      className="control-btn"
                      onClick={() => toggleAllIngredients(selectedRecipe.id, selectedRecipe.ingredients.length, true)}
                    >
                      全てチェック
                    </button>
                    <button 
                      className="control-btn"
                      onClick={() => toggleAllIngredients(selectedRecipe.id, selectedRecipe.ingredients.length, false)}
                    >
                      全て解除
                    </button>
                  </div>
                </div>
              </div>
              <ul className="ingredients-list">
                {getAdjustedIngredients(selectedRecipe).map((ingredient, index) => {
                  const key = `${selectedRecipe.id}-${index}`;
                  const isChecked = checkedIngredients[key] || false;
                  return (
                    <li key={index} className="ingredient-item">
                      <label className="ingredient-label">
                        <input
                          type="checkbox"
                          className="ingredient-checkbox"
                          checked={isChecked}
                          onChange={() => toggleIngredient(selectedRecipe.id, index)}
                        />
                        <span className="custom-checkbox"></span>
                        <span className={`ingredient-text ${isChecked ? 'checked' : ''}`}>
                          {ingredient}
                        </span>
                      </label>
                    </li>
                  );
                })}
              </ul>
            </div>
            
            <div className="instructions-section">
              <h3>作り方</h3>
              <ol>
                {selectedRecipe.instructions.map((step, index) => {
                  const time = extractTimeFromStep(step);
                  const timerId = `${selectedRecipe.id}-${index}`;
                  const timer = timers[timerId];
                  
                  return (
                    <li key={index} className="instruction-step">
                      <span className="step-text">{step}</span>
                      {time && (
                        <div className="timer-container">
                          {!timer ? (
                            <button
                              className="timer-btn start"
                              onClick={() => startTimer(selectedRecipe.id, index, time)}
                            >
                              ⏱️ {Math.floor(time / 60)}分
                            </button>
                          ) : timer.isCompleted ? (
                            <button
                              className="timer-btn completed"
                              onClick={() => stopTimer(selectedRecipe.id, index)}
                            >
                              ✅ 完了！
                            </button>
                          ) : (
                            <div className="timer-active">
                              <span className={`timer-display ${timer.remaining <= 10 ? 'warning' : ''}`}>
                                {formatTime(timer.remaining)}
                              </span>
                              {timer.isPaused ? (
                                <button
                                  className="timer-btn resume"
                                  onClick={() => resumeTimer(selectedRecipe.id, index)}
                                >
                                  ▶️
                                </button>
                              ) : (
                                <button
                                  className="timer-btn pause"
                                  onClick={() => pauseTimer(selectedRecipe.id, index)}
                                >
                                  ⏸️
                                </button>
                              )}
                              <button
                                className="timer-btn stop"
                                onClick={() => stopTimer(selectedRecipe.id, index)}
                              >
                                ⏹️
                              </button>
                            </div>
                          )}
                        </div>
                      )}
                    </li>
                  );
                })}
              </ol>
            </div>
            
            <div className="memo-section">
              <div className="memo-header">
                <h3>📝 メモ</h3>
                {memos[selectedRecipe.id] && (
                  <button 
                    className="clear-memo-btn"
                    onClick={() => {
                      if (window.confirm('メモを削除しますか？')) {
                        clearMemo(selectedRecipe.id);
                      }
                    }}
                  >
                    🗑️
                  </button>
                )}
              </div>
              <div className="memo-container">
                <textarea
                  className="memo-textarea"
                  placeholder="このレシピのメモを入力...（例：次は塩少なめ）"
                  value={memos[selectedRecipe.id] || ''}
                  onChange={(e) => {
                    const text = e.target.value;
                    if (text.length <= 200) {
                      updateMemo(selectedRecipe.id, text);
                    }
                  }}
                  maxLength={200}
                  rows={4}
                />
                <div className="memo-counter">
                  {(memos[selectedRecipe.id] || '').length}/200
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {notification && (
          <div className="notification-toast">
            {notification}
          </div>
        )}
        
      </div>
    );
  }

  const renderFloatingTabBar = () => {
    if (openRecipes.length === 0 || !showRecipeList) return null;
    
    return (
      <div className="floating-tab-bar">
        <div className="floating-tabs">
          {openRecipes.map((recipe, index) => (
            <button
              key={recipe.id}
              className={`floating-tab ${index === activeRecipeIndex ? 'active' : ''}`}
              onClick={() => {
                setActiveRecipeIndex(index);
                setShowRecipeList(false);
              }}
            >
              {recipe.name}
            </button>
          ))}
        </div>
      </div>
    );
  };

  return (
    <div className="App mobile-app">
      <header className="app-header">
        <h1>🍳 レシピアプリ</h1>
      </header>
      
      <main className="app-main">
        {activeTab === 'home' && renderHome()}
        {activeTab === 'search' && renderSearch()}
        {activeTab === 'bookmarks' && renderBookmarks()}
        {renderFloatingTabBar()}
      </main>
      
      <nav className="bottom-nav">
        <button 
          className={`nav-btn ${activeTab === 'home' ? 'active' : ''}`}
          onClick={() => setActiveTab('home')}
        >
          <span className="nav-icon">🏠</span>
          <span className="nav-label">ホーム</span>
        </button>
        <button 
          className={`nav-btn ${activeTab === 'search' ? 'active' : ''}`}
          onClick={() => setActiveTab('search')}
        >
          <span className="nav-icon">🔍</span>
          <span className="nav-label">検索</span>
        </button>
        <button 
          className={`nav-btn ${activeTab === 'bookmarks' ? 'active' : ''}`}
          onClick={() => setActiveTab('bookmarks')}
        >
          <span className="nav-icon">♡</span>
          <span className="nav-label">お気に入り</span>
        </button>
      </nav>
      
      {notification && (
        <div className="notification-toast">
          {notification}
        </div>
      )}
    </div>
  );
}

export default App;
